{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"https://welovemovies-backend-service-g7ns.onrender.com\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status === 204) {\n      return null;\n    }\n    const payload = await response.json();\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\nfunction populateReviews(signal) {\n  return async movie => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/reviews`;\n    movie.reviews = await fetchJson(url, {\n      headers,\n      signal\n    }, []);\n    return movie;\n  };\n}\nfunction populateTheaters(signal) {\n  return async movie => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/theaters`;\n    movie.theaters = await fetchJson(url, {\n      headers,\n      signal\n    }, []);\n    return movie;\n  };\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function listMovies(signal) {\n  const url = new URL(`${API_BASE_URL}/movies?is_showing=true`);\n  const addReviews = populateReviews(signal);\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []).then(movies => Promise.all(movies.map(addReviews)));\n}\n\n/**\n * Retrieves all existing theaters\n * @returns {Promise<[theater]>}\n *  a promise that resolves to a possibly empty array of theaters saved in the database.\n */\nexport async function listTheaters(signal) {\n  const url = new URL(`${API_BASE_URL}/theaters`);\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []);\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function readMovie(movieId, signal) {\n  const url = new URL(`${API_BASE_URL}/movies/${movieId}`);\n  const addReviews = populateReviews(signal);\n  const addTheaters = populateTheaters(signal);\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []).then(addReviews).then(addTheaters);\n}\nexport async function deleteReview(reviewId) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  return await fetchJson(url, {\n    method: \"DELETE\",\n    headers\n  }, {});\n}\nexport async function updateReview(reviewId, data) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      data\n    })\n  };\n  return await fetchJson(url, options, {});\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","resolve","populateReviews","signal","movie","movie_id","reviews","populateTheaters","theaters","listMovies","URL","addReviews","then","movies","all","map","listTheaters","readMovie","movieId","addTheaters","deleteReview","reviewId","method","updateReview","body","JSON","stringify"],"sources":["/Users/rkumar/SWETransition/BackEnd_Training/Projects/WeLoveMovies-FrontEnd/src/utils/api.js"],"sourcesContent":["const API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || \"https://welovemovies-backend-service-g7ns.onrender.com\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\nfunction populateReviews(signal) {\n  return async (movie) => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/reviews`;\n    movie.reviews = await fetchJson(url, { headers, signal }, []);\n    return movie;\n  };\n}\n\nfunction populateTheaters(signal) {\n  return async (movie) => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/theaters`;\n    movie.theaters = await fetchJson(url, { headers, signal }, []);\n    return movie;\n  };\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function listMovies(signal) {\n  const url = new URL(`${API_BASE_URL}/movies?is_showing=true`);\n  const addReviews = populateReviews(signal);\n  return await fetchJson(url, { headers, signal }, []).then((movies) =>\n    Promise.all(movies.map(addReviews))\n  );\n}\n\n/**\n * Retrieves all existing theaters\n * @returns {Promise<[theater]>}\n *  a promise that resolves to a possibly empty array of theaters saved in the database.\n */\nexport async function listTheaters(signal) {\n  const url = new URL(`${API_BASE_URL}/theaters`);\n  return await fetchJson(url, { headers, signal }, []);\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function readMovie(movieId, signal) {\n  const url = new URL(`${API_BASE_URL}/movies/${movieId}`);\n  const addReviews = populateReviews(signal);\n  const addTheaters = populateTheaters(signal);\n  return await fetchJson(url, { headers, signal }, [])\n    .then(addReviews)\n    .then(addTheaters);\n}\n\nexport async function deleteReview(reviewId) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  return await fetchJson(url, { method: \"DELETE\", headers }, {});\n}\n\nexport async function updateReview(reviewId, data) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ data }),\n  };\n  return await fetchJson(url, options, {});\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}