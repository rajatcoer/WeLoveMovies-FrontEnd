{"ast":null,"code":"// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function (expose) {\n  /**\n   *  class Markdown\n   *\n   *  Markdown processing in Javascript done right. We have very particular views\n   *  on what constitutes 'right' which include:\n   *\n   *  - produces well-formed HTML (this means that em and strong nesting is\n   *    important)\n   *\n   *  - has an intermediate representation to allow processing of parsed data (We\n   *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n   *\n   *  - is easily extensible to add new dialects without having to rewrite the\n   *    entire parsing mechanics\n   *\n   *  - has a good test suite\n   *\n   *  This implementation fulfills all of these (except that the test suite could\n   *  do with expanding to automatically run all the fixtures from other Markdown\n   *  implementations.)\n   *\n   *  ##### Intermediate Representation\n   *\n   *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n   *\n   *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n   **/\n  var Markdown = expose.Markdown = function (dialect) {\n    switch (typeof dialect) {\n      case \"undefined\":\n        this.dialect = Markdown.dialects.Gruber;\n        break;\n      case \"object\":\n        this.dialect = dialect;\n        break;\n      default:\n        if (dialect in Markdown.dialects) {\n          this.dialect = Markdown.dialects[dialect];\n        } else {\n          throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n        }\n        break;\n    }\n    this.em_state = [];\n    this.strong_state = [];\n    this.debug_indent = \"\";\n  };\n\n  /**\n   *  parse( markdown, [dialect] ) -> JsonML\n   *  - markdown (String): markdown string to parse\n   *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n   *\n   *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n   **/\n  expose.parse = function (source, dialect) {\n    // dialect will default if undefined\n    var md = new Markdown(dialect);\n    return md.toTree(source);\n  };\n\n  /**\n   *  toHTML( markdown, [dialect]  ) -> String\n   *  toHTML( md_tree ) -> String\n   *  - markdown (String): markdown string to parse\n   *  - md_tree (Markdown.JsonML): parsed markdown tree\n   *\n   *  Take markdown (either as a string or as a JsonML tree) and run it through\n   *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n   **/\n  expose.toHTML = function toHTML(source, dialect, options) {\n    var input = expose.toHTMLTree(source, dialect, options);\n    return expose.renderJsonML(input);\n  };\n\n  /**\n   *  toHTMLTree( markdown, [dialect] ) -> JsonML\n   *  toHTMLTree( md_tree ) -> JsonML\n   *  - markdown (String): markdown string to parse\n   *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n   *  - md_tree (Markdown.JsonML): parsed markdown tree\n   *\n   *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n   *  to this function, it is first parsed into a markdown tree by calling\n   *  [[parse]].\n   **/\n  expose.toHTMLTree = function toHTMLTree(input, dialect, options) {\n    // convert string input to an MD tree\n    if (typeof input === \"string\") input = this.parse(input, dialect);\n\n    // Now convert the MD tree to an HTML tree\n\n    // remove references from the tree\n    var attrs = extract_attr(input),\n      refs = {};\n    if (attrs && attrs.references) {\n      refs = attrs.references;\n    }\n    var html = convert_tree_to_html(input, refs, options);\n    merge_text_nodes(html);\n    return html;\n  };\n\n  // For Spidermonkey based engines\n  function mk_block_toSource() {\n    return \"Markdown.mk_block( \" + uneval(this.toString()) + \", \" + uneval(this.trailing) + \", \" + uneval(this.lineNumber) + \" )\";\n  }\n\n  // node\n  function mk_block_inspect() {\n    var util = require(\"util\");\n    return \"Markdown.mk_block( \" + util.inspect(this.toString()) + \", \" + util.inspect(this.trailing) + \", \" + util.inspect(this.lineNumber) + \" )\";\n  }\n  var mk_block = Markdown.mk_block = function (block, trail, line) {\n    // Be helpful for default case in tests.\n    if (arguments.length == 1) trail = \"\\n\\n\";\n    var s = new String(block);\n    s.trailing = trail;\n    // To make it clear its not just a string\n    s.inspect = mk_block_inspect;\n    s.toSource = mk_block_toSource;\n    if (line != undefined) s.lineNumber = line;\n    return s;\n  };\n  function count_lines(str) {\n    var n = 0,\n      i = -1;\n    while ((i = str.indexOf(\"\\n\", i + 1)) !== -1) n++;\n    return n;\n  }\n\n  // Internal - split source into rough blocks\n  Markdown.prototype.split_blocks = function splitBlocks(input, startLine) {\n    input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n    // [\\s\\S] matches _anything_ (newline or space)\n    // [^] is equivalent but doesn't work in IEs.\n    var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n    var line_no = 1;\n    if ((m = /^(\\s*\\n)/.exec(input)) != null) {\n      // skip (but count) leading blank lines\n      line_no += count_lines(m[0]);\n      re.lastIndex = m[0].length;\n    }\n    while ((m = re.exec(input)) !== null) {\n      if (m[2] == \"\\n#\") {\n        m[2] = \"\\n\";\n        re.lastIndex--;\n      }\n      blocks.push(mk_block(m[1], m[2], line_no));\n      line_no += count_lines(m[0]);\n    }\n    return blocks;\n  };\n\n  /**\n   *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n   *  - block (String): the block to process\n   *  - next (Array): the following blocks\n   *\n   * Process `block` and return an array of JsonML nodes representing `block`.\n   *\n   * It does this by asking each block level function in the dialect to process\n   * the block until one can. Succesful handling is indicated by returning an\n   * array (with zero or more JsonML nodes), failure by a false value.\n   *\n   * Blocks handlers are responsible for calling [[Markdown#processInline]]\n   * themselves as appropriate.\n   *\n   * If the blocks were split incorrectly or adjacent blocks need collapsing you\n   * can adjust `next` in place using shift/splice etc.\n   *\n   * If any of this default behaviour is not right for the dialect, you can\n   * define a `__call__` method on the dialect that will get invoked to handle\n   * the block processing.\n   */\n  Markdown.prototype.processBlock = function processBlock(block, next) {\n    var cbs = this.dialect.block,\n      ord = cbs.__order__;\n    if (\"__call__\" in cbs) {\n      return cbs.__call__.call(this, block, next);\n    }\n    for (var i = 0; i < ord.length; i++) {\n      //D:this.debug( \"Testing\", ord[i] );\n      var res = cbs[ord[i]].call(this, block, next);\n      if (res) {\n        //D:this.debug(\"  matched\");\n        if (!isArray(res) || res.length > 0 && !isArray(res[0])) this.debug(ord[i], \"didn't return a proper array\");\n        //D:this.debug( \"\" );\n        return res;\n      }\n    }\n\n    // Uhoh! no match! Should we throw an error?\n    return [];\n  };\n  Markdown.prototype.processInline = function processInline(block) {\n    return this.dialect.inline.__call__.call(this, String(block));\n  };\n\n  /**\n   *  Markdown#toTree( source ) -> JsonML\n   *  - source (String): markdown source to parse\n   *\n   *  Parse `source` into a JsonML tree representing the markdown document.\n   **/\n  // custom_tree means set this.tree to `custom_tree` and restore old value on return\n  Markdown.prototype.toTree = function toTree(source, custom_root) {\n    var blocks = source instanceof Array ? source : this.split_blocks(source);\n\n    // Make tree a member variable so its easier to mess with in extensions\n    var old_tree = this.tree;\n    try {\n      this.tree = custom_root || this.tree || [\"markdown\"];\n      blocks: while (blocks.length) {\n        var b = this.processBlock(blocks.shift(), blocks);\n\n        // Reference blocks and the like won't return any content\n        if (!b.length) continue blocks;\n        this.tree.push.apply(this.tree, b);\n      }\n      return this.tree;\n    } finally {\n      if (custom_root) {\n        this.tree = old_tree;\n      }\n    }\n  };\n\n  // Noop by default\n  Markdown.prototype.debug = function () {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(this.debug_indent);\n    if (typeof print !== \"undefined\") print.apply(print, args);\n    if (typeof console !== \"undefined\" && typeof console.log !== \"undefined\") console.log.apply(null, args);\n  };\n  Markdown.prototype.loop_re_over_block = function (re, block, cb) {\n    // Dont use /g regexps with this\n    var m,\n      b = block.valueOf();\n    while (b.length && (m = re.exec(b)) != null) {\n      b = b.substr(m[0].length);\n      cb.call(this, m);\n    }\n    return b;\n  };\n\n  /**\n   * Markdown.dialects\n   *\n   * Namespace of built-in dialects.\n   **/\n  Markdown.dialects = {};\n\n  /**\n   * Markdown.dialects.Gruber\n   *\n   * The default dialect that follows the rules set out by John Gruber's\n   * markdown.pl as closely as possible. Well actually we follow the behaviour of\n   * that script which in some places is not exactly what the syntax web page\n   * says.\n   **/\n  Markdown.dialects.Gruber = {\n    block: {\n      atxHeader: function atxHeader(block, next) {\n        var m = block.match(/^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/);\n        if (!m) return undefined;\n        var header = [\"header\", {\n          level: m[1].length\n        }];\n        Array.prototype.push.apply(header, this.processInline(m[2]));\n        if (m[0].length < block.length) next.unshift(mk_block(block.substr(m[0].length), block.trailing, block.lineNumber + 2));\n        return [header];\n      },\n      setextHeader: function setextHeader(block, next) {\n        var m = block.match(/^(.*)\\n([-=])\\2\\2+(?:\\n|$)/);\n        if (!m) return undefined;\n        var level = m[2] === \"=\" ? 1 : 2;\n        var header = [\"header\", {\n          level: level\n        }, m[1]];\n        if (m[0].length < block.length) next.unshift(mk_block(block.substr(m[0].length), block.trailing, block.lineNumber + 2));\n        return [header];\n      },\n      code: function code(block, next) {\n        // |    Foo\n        // |bar\n        // should be a code block followed by a paragraph. Fun\n        //\n        // There might also be adjacent code block to merge.\n\n        var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n        // 4 spaces + content\n        if (!block.match(re)) return undefined;\n        block_search: do {\n          // Now pull out the rest of the lines\n          var b = this.loop_re_over_block(re, block.valueOf(), function (m) {\n            ret.push(m[1]);\n          });\n          if (b.length) {\n            // Case alluded to in first comment. push it back on as a new block\n            next.unshift(mk_block(b, block.trailing));\n            break block_search;\n          } else if (next.length) {\n            // Check the next block - it might be code too\n            if (!next[0].match(re)) break block_search;\n\n            // Pull how how many blanks lines follow - minus two to account for .join\n            ret.push(block.trailing.replace(/[^\\n]/g, \"\").substring(2));\n            block = next.shift();\n          } else {\n            break block_search;\n          }\n        } while (true);\n        return [[\"code_block\", ret.join(\"\\n\")]];\n      },\n      horizRule: function horizRule(block, next) {\n        // this needs to find any hr in the block to handle abutting blocks\n        var m = block.match(/^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/);\n        if (!m) {\n          return undefined;\n        }\n        var jsonml = [[\"hr\"]];\n\n        // if there's a leading abutting block, process it\n        if (m[1]) {\n          jsonml.unshift.apply(jsonml, this.processBlock(m[1], []));\n        }\n\n        // if there's a trailing abutting block, stick it into next\n        if (m[3]) {\n          next.unshift(mk_block(m[3]));\n        }\n        return jsonml;\n      },\n      // There are two types of lists. Tight and loose. Tight lists have no whitespace\n      // between the items (and result in text just in the <li>) and loose lists,\n      // which have an empty line between list items, resulting in (one or more)\n      // paragraphs inside the <li>.\n      //\n      // There are all sorts weird edge cases about the original markdown.pl's\n      // handling of lists:\n      //\n      // * Nested lists are supposed to be indented by four chars per level. But\n      //   if they aren't, you can get a nested list by indenting by less than\n      //   four so long as the indent doesn't match an indent of an existing list\n      //   item in the 'nest stack'.\n      //\n      // * The type of the list (bullet or number) is controlled just by the\n      //    first item at the indent. Subsequent changes are ignored unless they\n      //    are for nested lists\n      //\n      lists: function () {\n        // Use a closure to hide a few variables.\n        var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp(\"^( {0,3})(\" + any_list + \")[ \\t]+\"),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n        // TODO: Cache this regexp for certain depths.\n        // Create a regexp suitable for matching an li for a given stack depth\n        function regex_for_depth(depth) {\n          return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth - 1) + \"}[ ]{0,4})\");\n        }\n        function expand_tab(input) {\n          return input.replace(/ {0,3}\\t/g, \"    \");\n        }\n\n        // Add inline content `inline` to `li`. inline comes from processInline\n        // so is an array of content\n        function add(li, loose, inline, nl) {\n          if (loose) {\n            li.push([\"para\"].concat(inline));\n            return;\n          }\n          // Hmmm, should this be any block level element or just paras?\n          var add_to = li[li.length - 1] instanceof Array && li[li.length - 1][0] == \"para\" ? li[li.length - 1] : li;\n\n          // If there is already some content in this list, add the new line in\n          if (nl && li.length > 1) inline.unshift(nl);\n          for (var i = 0; i < inline.length; i++) {\n            var what = inline[i],\n              is_str = typeof what == \"string\";\n            if (is_str && add_to.length > 1 && typeof add_to[add_to.length - 1] == \"string\") {\n              add_to[add_to.length - 1] += what;\n            } else {\n              add_to.push(what);\n            }\n          }\n        }\n\n        // contained means have an indent greater than the current one. On\n        // *every* line in the block\n        function get_contained_blocks(depth, blocks) {\n          var re = new RegExp(\"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\"),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n          while (blocks.length > 0) {\n            if (re.exec(blocks[0])) {\n              var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace(replace, \"\");\n              ret.push(mk_block(x, b.trailing, b.lineNumber));\n            } else {\n              break;\n            }\n          }\n          return ret;\n        }\n\n        // passed to stack.forEach to turn list items up the stack into paras\n        function paragraphify(s, i, stack) {\n          var list = s.list;\n          var last_li = list[list.length - 1];\n          if (last_li[1] instanceof Array && last_li[1][0] == \"para\") {\n            return;\n          }\n          if (i + 1 == stack.length) {\n            // Last stack frame\n            // Keep the same array, but replace the contents\n            last_li.push([\"para\"].concat(last_li.splice(1, last_li.length - 1)));\n          } else {\n            var sublist = last_li.pop();\n            last_li.push([\"para\"].concat(last_li.splice(1, last_li.length - 1)), sublist);\n          }\n        }\n\n        // The matcher function\n        return function (block, next) {\n          var m = block.match(is_list_re);\n          if (!m) return undefined;\n          function make_list(m) {\n            var list = bullet_list.exec(m[2]) ? [\"bulletlist\"] : [\"numberlist\"];\n            stack.push({\n              list: list,\n              indent: m[1]\n            });\n            return list;\n          }\n          var stack = [],\n            // Stack of lists for nesting.\n            list = make_list(m),\n            last_li,\n            loose = false,\n            ret = [stack[0].list],\n            i;\n\n          // Loop to search over block looking for inner block elements and loose lists\n          loose_search: while (true) {\n            // Split into lines preserving new lines at end of line\n            var lines = block.split(/(?=\\n)/);\n\n            // We have to grab all lines for a li and call processInline on them\n            // once as there are some inline things that can span lines.\n            var li_accumulate = \"\";\n\n            // Loop over the lines in this block looking for tight lists.\n            tight_search: for (var line_no = 0; line_no < lines.length; line_no++) {\n              var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function (n) {\n                  nl = n;\n                  return \"\";\n                });\n\n              // TODO: really should cache this\n              var line_re = regex_for_depth(stack.length);\n              m = l.match(line_re);\n              //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n              // We have a list item\n              if (m[1] !== undefined) {\n                // Process the previous list item, if any\n                if (li_accumulate.length) {\n                  add(last_li, loose, this.processInline(li_accumulate), nl);\n                  // Loose mode will have been dealt with. Reset it\n                  loose = false;\n                  li_accumulate = \"\";\n                }\n                m[1] = expand_tab(m[1]);\n                var wanted_depth = Math.floor(m[1].length / 4) + 1;\n                //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n                if (wanted_depth > stack.length) {\n                  // Deep enough for a nested list outright\n                  //print ( \"new nested list\" );\n                  list = make_list(m);\n                  last_li.push(list);\n                  last_li = list[1] = [\"listitem\"];\n                } else {\n                  // We aren't deep enough to be strictly a new level. This is\n                  // where Md.pl goes nuts. If the indent matches a level in the\n                  // stack, put it there, else put it one deeper then the\n                  // wanted_depth deserves.\n                  var found = false;\n                  for (i = 0; i < stack.length; i++) {\n                    if (stack[i].indent != m[1]) continue;\n                    list = stack[i].list;\n                    stack.splice(i + 1, stack.length - (i + 1));\n                    found = true;\n                    break;\n                  }\n                  if (!found) {\n                    //print(\"not found. l:\", uneval(l));\n                    wanted_depth++;\n                    if (wanted_depth <= stack.length) {\n                      stack.splice(wanted_depth, stack.length - wanted_depth);\n                      //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                      list = stack[wanted_depth - 1].list;\n                      //print(\"list:\", uneval(list) );\n                    } else {\n                      //print (\"made new stack for messy indent\");\n                      list = make_list(m);\n                      last_li.push(list);\n                    }\n                  }\n\n                  //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                  last_li = [\"listitem\"];\n                  list.push(last_li);\n                } // end depth of shenegains\n                nl = \"\";\n              }\n\n              // Add content\n              if (l.length > m[0].length) {\n                li_accumulate += nl + l.substr(m[0].length);\n              }\n            } // tight_search\n\n            if (li_accumulate.length) {\n              add(last_li, loose, this.processInline(li_accumulate), nl);\n              // Loose mode will have been dealt with. Reset it\n              loose = false;\n              li_accumulate = \"\";\n            }\n\n            // Look at the next block - we might have a loose list. Or an extra\n            // paragraph for the current li\n            var contained = get_contained_blocks(stack.length, next);\n\n            // Deal with code blocks or properly nested lists\n            if (contained.length > 0) {\n              // Make sure all listitems up the stack are paragraphs\n              forEach(stack, paragraphify, this);\n              last_li.push.apply(last_li, this.toTree(contained, []));\n            }\n            var next_block = next[0] && next[0].valueOf() || \"\";\n            if (next_block.match(is_list_re) || next_block.match(/^ /)) {\n              block = next.shift();\n\n              // Check for an HR following a list: features/lists/hr_abutting\n              var hr = this.dialect.block.horizRule(block, next);\n              if (hr) {\n                ret.push.apply(ret, hr);\n                break;\n              }\n\n              // Make sure all listitems up the stack are paragraphs\n              forEach(stack, paragraphify, this);\n              loose = true;\n              continue loose_search;\n            }\n            break;\n          } // loose_search\n\n          return ret;\n        };\n      }(),\n      blockquote: function blockquote(block, next) {\n        if (!block.match(/^>/m)) return undefined;\n        var jsonml = [];\n\n        // separate out the leading abutting block, if any. I.e. in this case:\n        //\n        //  a\n        //  > b\n        //\n        if (block[0] != \">\") {\n          var lines = block.split(/\\n/),\n            prev = [],\n            line_no = block.lineNumber;\n\n          // keep shifting lines until you find a crotchet\n          while (lines.length && lines[0][0] != \">\") {\n            prev.push(lines.shift());\n            line_no++;\n          }\n          var abutting = mk_block(prev.join(\"\\n\"), \"\\n\", block.lineNumber);\n          jsonml.push.apply(jsonml, this.processBlock(abutting, []));\n          // reassemble new block of just block quotes!\n          block = mk_block(lines.join(\"\\n\"), block.trailing, line_no);\n        }\n\n        // if the next block is also a blockquote merge it in\n        while (next.length && next[0][0] == \">\") {\n          var b = next.shift();\n          block = mk_block(block + block.trailing + b, b.trailing, block.lineNumber);\n        }\n\n        // Strip off the leading \"> \" and re-process as a block.\n        var input = block.replace(/^> ?/gm, \"\"),\n          old_tree = this.tree,\n          processedBlock = this.toTree(input, [\"blockquote\"]),\n          attr = extract_attr(processedBlock);\n\n        // If any link references were found get rid of them\n        if (attr && attr.references) {\n          delete attr.references;\n          // And then remove the attribute object if it's empty\n          if (isEmpty(attr)) {\n            processedBlock.splice(1, 1);\n          }\n        }\n        jsonml.push(processedBlock);\n        return jsonml;\n      },\n      referenceDefn: function referenceDefn(block, next) {\n        var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n        // interesting matches are [ , ref_id, url, , title, title ]\n\n        if (!block.match(re)) return undefined;\n\n        // make an attribute node if it doesn't exist\n        if (!extract_attr(this.tree)) {\n          this.tree.splice(1, 0, {});\n        }\n        var attrs = extract_attr(this.tree);\n\n        // make a references hash if it doesn't exist\n        if (attrs.references === undefined) {\n          attrs.references = {};\n        }\n        var b = this.loop_re_over_block(re, block, function (m) {\n          if (m[2] && m[2][0] == \"<\" && m[2][m[2].length - 1] == \">\") m[2] = m[2].substring(1, m[2].length - 1);\n          var ref = attrs.references[m[1].toLowerCase()] = {\n            href: m[2]\n          };\n          if (m[4] !== undefined) ref.title = m[4];else if (m[5] !== undefined) ref.title = m[5];\n        });\n        if (b.length) next.unshift(mk_block(b, block.trailing));\n        return [];\n      },\n      para: function para(block, next) {\n        // everything's a para!\n        return [[\"para\"].concat(this.processInline(block))];\n      }\n    }\n  };\n  Markdown.dialects.Gruber.inline = {\n    __oneElement__: function oneElement(text, patterns_or_re, previous_nodes) {\n      var m,\n        res,\n        lastIndex = 0;\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp(\"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\");\n      m = re.exec(text);\n      if (!m) {\n        // Just boring text\n        return [text.length, text];\n      } else if (m[1]) {\n        // Some un-interesting text matched. Return that first\n        return [m[1].length, m[1]];\n      }\n      var res;\n      if (m[2] in this.dialect.inline) {\n        res = this.dialect.inline[m[2]].call(this, text.substr(m.index), m, previous_nodes || []);\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [m[2].length, m[2]];\n      return res;\n    },\n    __call__: function inline(text, patterns) {\n      var out = [],\n        res;\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if (typeof x == \"string\" && typeof out[out.length - 1] == \"string\") out[out.length - 1] += x;else out.push(x);\n      }\n      while (text.length > 0) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out);\n        text = text.substr(res.shift());\n        forEach(res, add);\n      }\n      return out;\n    },\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n    __escape__: /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n    \"\\\\\": function escaped(text) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if (this.dialect.inline.__escape__.exec(text)) return [2, text.charAt(1)];else\n        // Not an esacpe\n        return [1, \"\\\\\"];\n    },\n    \"![\": function image(text) {\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match(/^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/);\n      if (m) {\n        if (m[2] && m[2][0] == \"<\" && m[2][m[2].length - 1] == \">\") m[2] = m[2].substring(1, m[2].length - 1);\n        m[2] = this.dialect.inline.__call__.call(this, m[2], /\\\\/)[0];\n        var attrs = {\n          alt: m[1],\n          href: m[2] || \"\"\n        };\n        if (m[4] !== undefined) attrs.title = m[4];\n        return [m[0].length, [\"img\", attrs]];\n      }\n\n      // ![Alt text][id]\n      m = text.match(/^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/);\n      if (m) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [m[0].length, [\"img_ref\", {\n          alt: m[1],\n          ref: m[2].toLowerCase(),\n          original: m[0]\n        }]];\n      }\n\n      // Just consume the '!['\n      return [2, \"![\"];\n    },\n    \"[\": function link(text) {\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call(this, text.substr(1), \"]\");\n\n      // No closing ']' found. Just consume the [\n      if (!res) return [1, \"[\"];\n      var consumed = 1 + res[0],\n        children = res[1],\n        link,\n        attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr(consumed);\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match(/^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/);\n      if (m) {\n        var url = m[1];\n        consumed += m[0].length;\n        if (url && url[0] == \"<\" && url[url.length - 1] == \">\") url = url.substring(1, url.length - 1);\n\n        // If there is a title we don't have to worry about parens in the url\n        if (!m[3]) {\n          var open_parens = 1; // One open that isn't in the capture\n          for (var len = 0; len < url.length; len++) {\n            switch (url[len]) {\n              case \"(\":\n                open_parens++;\n                break;\n              case \")\":\n                if (--open_parens == 0) {\n                  consumed -= url.length - len;\n                  url = url.substring(0, len);\n                }\n                break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call(this, url, /\\\\/)[0];\n        attrs = {\n          href: url || \"\"\n        };\n        if (m[3] !== undefined) attrs.title = m[3];\n        link = [\"link\", attrs].concat(children);\n        return [consumed, link];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match(/^\\s*\\[(.*?)\\]/);\n      if (m) {\n        consumed += m[0].length;\n\n        // [links][] uses links as its reference\n        attrs = {\n          ref: (m[1] || String(children)).toLowerCase(),\n          original: orig.substr(0, consumed)\n        };\n        link = [\"link_ref\", attrs].concat(children);\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [consumed, link];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if (children.length == 1 && typeof children[0] == \"string\") {\n        attrs = {\n          ref: children[0].toLowerCase(),\n          original: orig.substr(0, consumed)\n        };\n        link = [\"link_ref\", attrs, children[0]];\n        return [consumed, link];\n      }\n\n      // Just consume the \"[\"\n      return [1, \"[\"];\n    },\n    \"<\": function autoLink(text) {\n      var m;\n      if ((m = text.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/)) != null) {\n        if (m[3]) {\n          return [m[0].length, [\"link\", {\n            href: \"mailto:\" + m[3]\n          }, m[3]]];\n        } else if (m[2] == \"mailto\") {\n          return [m[0].length, [\"link\", {\n            href: m[1]\n          }, m[1].substr(\"mailto:\".length)]];\n        } else return [m[0].length, [\"link\", {\n          href: m[1]\n        }, m[1]]];\n      }\n      return [1, \"<\"];\n    },\n    \"`\": function inlineCode(text) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match(/(`+)(([\\s\\S]*?)\\1)/);\n      if (m && m[2]) return [m[1].length + m[2].length, [\"inlinecode\", m[3]]];else {\n        // TODO: No matching end code found - warn!\n        return [1, \"`\"];\n      }\n    },\n    \"  \\n\": function lineBreak(text) {\n      return [3, [\"linebreak\"]];\n    }\n  };\n\n  // Meta Helper/generator method for em and strong handling\n  function strong_em(tag, md) {\n    var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n    function CloseTag(len) {\n      this.len_after = len;\n      this.name = \"close_\" + md;\n    }\n    return function (text, orig_match) {\n      if (this[state_slot][0] == md) {\n        // Most recent em is of this type\n        //D:this.debug(\"closing\", md);\n        this[state_slot].shift();\n\n        // \"Consume\" everything to go back to the recrusion in the else-block below\n        return [text.length, new CloseTag(text.length - md.length)];\n      } else {\n        // Store a clone of the em/strong states\n        var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n        this[state_slot].unshift(md);\n\n        //D:this.debug_indent += \"  \";\n\n        // Recurse\n        var res = this.processInline(text.substr(md.length));\n        //D:this.debug_indent = this.debug_indent.substr(2);\n\n        var last = res[res.length - 1];\n\n        //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n        var check = this[state_slot].shift();\n        if (last instanceof CloseTag) {\n          res.pop();\n          // We matched! Huzzah.\n          var consumed = text.length - last.len_after;\n          return [consumed, [tag].concat(res)];\n        } else {\n          // Restore the state of the other kind. We might have mistakenly closed it.\n          this[other_slot] = other;\n          this[state_slot] = state;\n\n          // We can't reuse the processed result as it could have wrong parsing contexts in it.\n          return [md.length, md];\n        }\n      }\n    }; // End returned function\n  }\n  Markdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\n  Markdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\n  Markdown.dialects.Gruber.inline[\"*\"] = strong_em(\"em\", \"*\");\n  Markdown.dialects.Gruber.inline[\"_\"] = strong_em(\"em\", \"_\");\n\n  // Build default order from insertion order.\n  Markdown.buildBlockOrder = function (d) {\n    var ord = [];\n    for (var i in d) {\n      if (i == \"__order__\" || i == \"__call__\") continue;\n      ord.push(i);\n    }\n    d.__order__ = ord;\n  };\n\n  // Build patterns for inline matcher\n  Markdown.buildInlinePatterns = function (d) {\n    var patterns = [];\n    for (var i in d) {\n      // __foo__ is reserved and not a pattern\n      if (i.match(/^__.*__$/)) continue;\n      var l = i.replace(/([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\").replace(/\\n/, \"\\\\n\");\n      patterns.push(i.length == 1 ? l : \"(?:\" + l + \")\");\n    }\n    patterns = patterns.join(\"|\");\n    d.__patterns__ = patterns;\n    //print(\"patterns:\", uneval( patterns ) );\n\n    var fn = d.__call__;\n    d.__call__ = function (text, pattern) {\n      if (pattern != undefined) {\n        return fn.call(this, text, pattern);\n      } else {\n        return fn.call(this, text, patterns);\n      }\n    };\n  };\n  Markdown.DialectHelpers = {};\n  Markdown.DialectHelpers.inline_until_char = function (text, want) {\n    var consumed = 0,\n      nodes = [];\n    while (true) {\n      if (text.charAt(consumed) == want) {\n        // Found the character we were looking for\n        consumed++;\n        return [consumed, nodes];\n      }\n      if (consumed >= text.length) {\n        // No closing char found. Abort.\n        return null;\n      }\n      var res = this.dialect.inline.__oneElement__.call(this, text.substr(consumed));\n      consumed += res[0];\n      // Add any returned nodes.\n      nodes.push.apply(nodes, res.slice(1));\n    }\n  };\n\n  // Helper function to make sub-classing a dialect easier\n  Markdown.subclassDialect = function (d) {\n    function Block() {}\n    Block.prototype = d.block;\n    function Inline() {}\n    Inline.prototype = d.inline;\n    return {\n      block: new Block(),\n      inline: new Inline()\n    };\n  };\n  Markdown.buildBlockOrder(Markdown.dialects.Gruber.block);\n  Markdown.buildInlinePatterns(Markdown.dialects.Gruber.inline);\n  Markdown.dialects.Maruku = Markdown.subclassDialect(Markdown.dialects.Gruber);\n  Markdown.dialects.Maruku.processMetaHash = function processMetaHash(meta_string) {\n    var meta = split_meta_hash(meta_string),\n      attr = {};\n    for (var i = 0; i < meta.length; ++i) {\n      // id: #foo\n      if (/^#/.test(meta[i])) {\n        attr.id = meta[i].substring(1);\n      }\n      // class: .foo\n      else if (/^\\./.test(meta[i])) {\n        // if class already exists, append the new one\n        if (attr[\"class\"]) {\n          attr[\"class\"] = attr[\"class\"] + meta[i].replace(/./, \" \");\n        } else {\n          attr[\"class\"] = meta[i].substring(1);\n        }\n      }\n      // attribute: foo=bar\n      else if (/\\=/.test(meta[i])) {\n        var s = meta[i].split(/\\=/);\n        attr[s[0]] = s[1];\n      }\n    }\n    return attr;\n  };\n  function split_meta_hash(meta_string) {\n    var meta = meta_string.split(\"\"),\n      parts = [\"\"],\n      in_quotes = false;\n    while (meta.length) {\n      var letter = meta.shift();\n      switch (letter) {\n        case \" \":\n          // if we're in a quoted section, keep it\n          if (in_quotes) {\n            parts[parts.length - 1] += letter;\n          }\n          // otherwise make a new part\n          else {\n            parts.push(\"\");\n          }\n          break;\n        case \"'\":\n        case '\"':\n          // reverse the quotes and move straight on\n          in_quotes = !in_quotes;\n          break;\n        case \"\\\\\":\n          // shift off the next letter to be used straight away.\n          // it was escaped so we'll keep it whatever it is\n          letter = meta.shift();\n        default:\n          parts[parts.length - 1] += letter;\n          break;\n      }\n    }\n    return parts;\n  }\n  Markdown.dialects.Maruku.block.document_meta = function document_meta(block, next) {\n    // we're only interested in the first block\n    if (block.lineNumber > 1) return undefined;\n\n    // document_meta blocks consist of one or more lines of `Key: Value\\n`\n    if (!block.match(/^(?:\\w+:.*\\n)*\\w+:.*$/)) return undefined;\n\n    // make an attribute node if it doesn't exist\n    if (!extract_attr(this.tree)) {\n      this.tree.splice(1, 0, {});\n    }\n    var pairs = block.split(/\\n/);\n    for (p in pairs) {\n      var m = pairs[p].match(/(\\w+):\\s*(.*)$/),\n        key = m[1].toLowerCase(),\n        value = m[2];\n      this.tree[1][key] = value;\n    }\n\n    // document_meta produces no content!\n    return [];\n  };\n  Markdown.dialects.Maruku.block.block_meta = function block_meta(block, next) {\n    // check if the last line of the block is an meta hash\n    var m = block.match(/(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/);\n    if (!m) return undefined;\n\n    // process the meta hash\n    var attr = this.dialect.processMetaHash(m[2]);\n    var hash;\n\n    // if we matched ^ then we need to apply meta to the previous block\n    if (m[1] === \"\") {\n      var node = this.tree[this.tree.length - 1];\n      hash = extract_attr(node);\n\n      // if the node is a string (rather than JsonML), bail\n      if (typeof node === \"string\") return undefined;\n\n      // create the attribute hash if it doesn't exist\n      if (!hash) {\n        hash = {};\n        node.splice(1, 0, hash);\n      }\n\n      // add the attributes in\n      for (a in attr) {\n        hash[a] = attr[a];\n      }\n\n      // return nothing so the meta hash is removed\n      return [];\n    }\n\n    // pull the meta hash off the block and process what's left\n    var b = block.replace(/\\n.*$/, \"\"),\n      result = this.processBlock(b, []);\n\n    // get or make the attributes hash\n    hash = extract_attr(result[0]);\n    if (!hash) {\n      hash = {};\n      result[0].splice(1, 0, hash);\n    }\n\n    // attach the attributes to the block\n    for (a in attr) {\n      hash[a] = attr[a];\n    }\n    return result;\n  };\n  Markdown.dialects.Maruku.block.definition_list = function definition_list(block, next) {\n    // one or more terms followed by one or more definitions, in a single block\n    var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [\"dl\"],\n      i,\n      m;\n\n    // see if we're dealing with a tight or loose block\n    if (m = block.match(tight)) {\n      // pull subsequent tight DL blocks out of `next`\n      var blocks = [block];\n      while (next.length && tight.exec(next[0])) {\n        blocks.push(next.shift());\n      }\n      for (var b = 0; b < blocks.length; ++b) {\n        var m = blocks[b].match(tight),\n          terms = m[1].replace(/\\n$/, \"\").split(/\\n/),\n          defns = m[2].split(/\\n:\\s+/);\n\n        // print( uneval( m ) );\n\n        for (i = 0; i < terms.length; ++i) {\n          list.push([\"dt\", terms[i]]);\n        }\n        for (i = 0; i < defns.length; ++i) {\n          // run inline processing over the definition\n          list.push([\"dd\"].concat(this.processInline(defns[i].replace(/(\\n)\\s+/, \"$1\"))));\n        }\n      }\n    } else {\n      return undefined;\n    }\n    return [list];\n  };\n\n  // splits on unescaped instances of @ch. If @ch is not a character the result\n  // can be unpredictable\n\n  Markdown.dialects.Maruku.block.table = function table(block, next) {\n    var _split_on_unescaped = function (s, ch) {\n      ch = ch || '\\\\s';\n      if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) {\n        ch = '\\\\' + ch;\n      }\n      var res = [],\n        r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n        m;\n      while (m = s.match(r)) {\n        res.push(m[1]);\n        s = m[2];\n      }\n      res.push(s);\n      return res;\n    };\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n      // find at least an unescaped pipe in each line\n      no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n      i,\n      m;\n    if (m = block.match(leading_pipe)) {\n      // remove leading pipes in contents\n      // (header and horizontal rule already have the leading pipe left out)\n      m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (!(m = block.match(no_leading_pipe))) {\n      return undefined;\n    }\n    var table = [\"table\", [\"thead\", [\"tr\"]], [\"tbody\"]];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [];\n    forEach(m[2], function (s) {\n      if (s.match(/^\\s*-+:\\s*$/)) html_attrs.push({\n        align: \"right\"\n      });else if (s.match(/^\\s*:-+\\s*$/)) html_attrs.push({\n        align: \"left\"\n      });else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({\n        align: \"center\"\n      });else html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n      table[1][1].push(['th', html_attrs[i] || {}].concat(this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach(m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n      var html_row = ['tr'];\n      row = _split_on_unescaped(row, '|');\n      for (i = 0; i < row.length; i++) {\n        html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n      }\n      table[2].push(html_row);\n    }, this);\n    return [table];\n  };\n  Markdown.dialects.Maruku.inline[\"{:\"] = function inline_meta(text, matches, out) {\n    if (!out.length) {\n      return [2, \"{:\"];\n    }\n\n    // get the preceeding element\n    var before = out[out.length - 1];\n    if (typeof before === \"string\") {\n      return [2, \"{:\"];\n    }\n\n    // match a meta hash\n    var m = text.match(/^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/);\n\n    // no match, false alarm\n    if (!m) {\n      return [2, \"{:\"];\n    }\n\n    // attach the attributes to the preceeding element\n    var meta = this.dialect.processMetaHash(m[1]),\n      attr = extract_attr(before);\n    if (!attr) {\n      attr = {};\n      before.splice(1, 0, attr);\n    }\n    for (var k in meta) {\n      attr[k] = meta[k];\n    }\n\n    // cut out the string and replace it with nothing\n    return [m[0].length, \"\"];\n  };\n  Markdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n  Markdown.buildBlockOrder(Markdown.dialects.Maruku.block);\n  Markdown.buildInlinePatterns(Markdown.dialects.Maruku.inline);\n  var isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) == \"[object Array]\";\n  };\n  var forEach;\n  // Don't mess with Array.prototype. Its not friendly\n  if (Array.prototype.forEach) {\n    forEach = function (arr, cb, thisp) {\n      return arr.forEach(cb, thisp);\n    };\n  } else {\n    forEach = function (arr, cb, thisp) {\n      for (var i = 0; i < arr.length; i++) {\n        cb.call(thisp || arr, arr[i], i, arr);\n      }\n    };\n  }\n  var isEmpty = function (obj) {\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  function extract_attr(jsonml) {\n    return isArray(jsonml) && jsonml.length > 1 && typeof jsonml[1] === \"object\" && !isArray(jsonml[1]) ? jsonml[1] : undefined;\n  }\n\n  /**\n   *  renderJsonML( jsonml[, options] ) -> String\n   *  - jsonml (Array): JsonML array to render to XML\n   *  - options (Object): options\n   *\n   *  Converts the given JsonML into well-formed XML.\n   *\n   *  The options currently understood are:\n   *\n   *  - root (Boolean): wether or not the root node should be included in the\n   *    output, or just its children. The default `false` is to not include the\n   *    root itself.\n   */\n  expose.renderJsonML = function (jsonml, options) {\n    options = options || {};\n    // include the root element in the rendered output?\n    options.root = options.root || false;\n    var content = [];\n    if (options.root) {\n      content.push(render_tree(jsonml));\n    } else {\n      jsonml.shift(); // get rid of the tag\n      if (jsonml.length && typeof jsonml[0] === \"object\" && !(jsonml[0] instanceof Array)) {\n        jsonml.shift(); // get rid of the attributes\n      }\n      while (jsonml.length) {\n        content.push(render_tree(jsonml.shift()));\n      }\n    }\n    return content.join(\"\\n\\n\");\n  };\n  function escapeHTML(text) {\n    return text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n  }\n  function render_tree(jsonml) {\n    // basic case\n    if (typeof jsonml === \"string\") {\n      return escapeHTML(jsonml);\n    }\n    var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n    if (jsonml.length && typeof jsonml[0] === \"object\" && !(jsonml[0] instanceof Array)) {\n      attributes = jsonml.shift();\n    }\n    while (jsonml.length) {\n      content.push(render_tree(jsonml.shift()));\n    }\n    var tag_attrs = \"\";\n    for (var a in attributes) {\n      tag_attrs += \" \" + a + '=\"' + escapeHTML(attributes[a]) + '\"';\n    }\n\n    // be careful about adding whitespace here for inline elements\n    if (tag == \"img\" || tag == \"br\" || tag == \"hr\") {\n      return \"<\" + tag + tag_attrs + \"/>\";\n    } else {\n      return \"<\" + tag + tag_attrs + \">\" + content.join(\"\") + \"</\" + tag + \">\";\n    }\n  }\n  function convert_tree_to_html(tree, references, options) {\n    var i;\n    options = options || {};\n\n    // shallow clone\n    var jsonml = tree.slice(0);\n    if (typeof options.preprocessTreeNode === \"function\") {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n    }\n\n    // Clone attributes if they exist\n    var attrs = extract_attr(jsonml);\n    if (attrs) {\n      jsonml[1] = {};\n      for (i in attrs) {\n        jsonml[1][i] = attrs[i];\n      }\n      attrs = jsonml[1];\n    }\n\n    // basic case\n    if (typeof jsonml === \"string\") {\n      return jsonml;\n    }\n\n    // convert this node\n    switch (jsonml[0]) {\n      case \"header\":\n        jsonml[0] = \"h\" + jsonml[1].level;\n        delete jsonml[1].level;\n        break;\n      case \"bulletlist\":\n        jsonml[0] = \"ul\";\n        break;\n      case \"numberlist\":\n        jsonml[0] = \"ol\";\n        break;\n      case \"listitem\":\n        jsonml[0] = \"li\";\n        break;\n      case \"para\":\n        jsonml[0] = \"p\";\n        break;\n      case \"markdown\":\n        jsonml[0] = \"html\";\n        if (attrs) delete attrs.references;\n        break;\n      case \"code_block\":\n        jsonml[0] = \"pre\";\n        i = attrs ? 2 : 1;\n        var code = [\"code\"];\n        code.push.apply(code, jsonml.splice(i, jsonml.length - i));\n        jsonml[i] = code;\n        break;\n      case \"inlinecode\":\n        jsonml[0] = \"code\";\n        break;\n      case \"img\":\n        jsonml[1].src = jsonml[1].href;\n        delete jsonml[1].href;\n        break;\n      case \"linebreak\":\n        jsonml[0] = \"br\";\n        break;\n      case \"link\":\n        jsonml[0] = \"a\";\n        break;\n      case \"link_ref\":\n        jsonml[0] = \"a\";\n\n        // grab this ref and clean up the attribute node\n        var ref = references[attrs.ref];\n\n        // if the reference exists, make the link\n        if (ref) {\n          delete attrs.ref;\n\n          // add in the href and title, if present\n          attrs.href = ref.href;\n          if (ref.title) {\n            attrs.title = ref.title;\n          }\n\n          // get rid of the unneeded original text\n          delete attrs.original;\n        }\n        // the reference doesn't exist, so revert to plain text\n        else {\n          return attrs.original;\n        }\n        break;\n      case \"img_ref\":\n        jsonml[0] = \"img\";\n\n        // grab this ref and clean up the attribute node\n        var ref = references[attrs.ref];\n\n        // if the reference exists, make the link\n        if (ref) {\n          delete attrs.ref;\n\n          // add in the href and title, if present\n          attrs.src = ref.href;\n          if (ref.title) {\n            attrs.title = ref.title;\n          }\n\n          // get rid of the unneeded original text\n          delete attrs.original;\n        }\n        // the reference doesn't exist, so revert to plain text\n        else {\n          return attrs.original;\n        }\n        break;\n    }\n\n    // convert all the children\n    i = 1;\n\n    // deal with the attribute node, if it exists\n    if (attrs) {\n      // if there are keys, skip over it\n      for (var key in jsonml[1]) {\n        i = 2;\n        break;\n      }\n      // if there aren't, remove it\n      if (i === 1) {\n        jsonml.splice(i, 1);\n      }\n    }\n    for (; i < jsonml.length; ++i) {\n      jsonml[i] = convert_tree_to_html(jsonml[i], references, options);\n    }\n    return jsonml;\n  }\n\n  // merges adjacent text nodes into a single node\n  function merge_text_nodes(jsonml) {\n    // skip the tag name and attribute hash\n    var i = extract_attr(jsonml) ? 2 : 1;\n    while (i < jsonml.length) {\n      // if it's a string check the next item too\n      if (typeof jsonml[i] === \"string\") {\n        if (i + 1 < jsonml.length && typeof jsonml[i + 1] === \"string\") {\n          // merge the second string into the first and remove it\n          jsonml[i] += jsonml.splice(i + 1, 1)[0];\n        } else {\n          ++i;\n        }\n      }\n      // if it's not a string recurse\n      else {\n        merge_text_nodes(jsonml[i]);\n        ++i;\n      }\n    }\n  }\n})(function () {\n  if (typeof exports === \"undefined\") {\n    window.markdown = {};\n    return window.markdown;\n  } else {\n    return exports;\n  }\n}());","map":{"version":3,"names":["expose","Markdown","dialect","dialects","Gruber","Error","String","em_state","strong_state","debug_indent","parse","source","md","toTree","toHTML","options","input","toHTMLTree","renderJsonML","attrs","extract_attr","refs","references","html","convert_tree_to_html","merge_text_nodes","mk_block_toSource","uneval","toString","trailing","lineNumber","mk_block_inspect","util","require","inspect","mk_block","block","trail","line","arguments","length","s","toSource","undefined","count_lines","str","n","i","indexOf","prototype","split_blocks","splitBlocks","startLine","replace","re","blocks","m","line_no","exec","lastIndex","push","processBlock","next","cbs","ord","__order__","__call__","call","res","isArray","debug","processInline","inline","custom_root","Array","old_tree","tree","b","shift","apply","args","slice","unshift","print","console","log","loop_re_over_block","cb","valueOf","substr","atxHeader","match","header","level","setextHeader","code","ret","lines","block_search","substring","join","horizRule","jsonml","lists","any_list","bullet_list","number_list","is_list_re","RegExp","indent_re","regex_for_depth","depth","expand_tab","add","li","loose","nl","concat","add_to","what","is_str","get_contained_blocks","x","paragraphify","stack","list","last_li","splice","sublist","pop","make_list","indent","loose_search","split","li_accumulate","tight_search","l","line_re","wanted_depth","Math","floor","found","contained","forEach","next_block","hr","blockquote","prev","abutting","processedBlock","attr","isEmpty","referenceDefn","ref","toLowerCase","href","title","para","__oneElement__","oneElement","text","patterns_or_re","previous_nodes","__patterns__","index","patterns","out","]","}","__escape__","escaped","charAt","image","alt","original","link","orig","DialectHelpers","inline_until_char","consumed","children","url","open_parens","len","autoLink","inlineCode","lineBreak","strong_em","tag","state_slot","other_slot","CloseTag","len_after","name","orig_match","other","state","last","check","buildBlockOrder","d","buildInlinePatterns","fn","pattern","want","nodes","subclassDialect","Block","Inline","Maruku","processMetaHash","meta_string","meta","split_meta_hash","test","id","parts","in_quotes","letter","document_meta","pairs","p","key","value","block_meta","hash","node","a","result","definition_list","tight","terms","defns","table","_split_on_unescaped","ch","r","leading_pipe","no_leading_pipe","html_attrs","align","trim","row","html_row","inline_meta","matches","before","k","obj","Object","arr","thisp","hasOwnProperty","root","content","render_tree","escapeHTML","attributes","tag_attrs","preprocessTreeNode","src","exports","window","markdown"],"sources":["/Users/rkumar/SWETransition/BackEnd_Training/Projects/WeLoveMovies-FrontEnd/node_modules/markdown/lib/markdown.js"],"sourcesContent":["// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = require(\"util\");\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( typeof exports === \"undefined\" ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,UAAUA,MAAM,EAAG;EAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,GAAG,UAASC,OAAO,EAAE;IACjD,QAAQ,OAAOA,OAAO;MACpB,KAAK,WAAW;QACd,IAAI,CAACA,OAAO,GAAGD,QAAQ,CAACE,QAAQ,CAACC,MAAM;QACvC;MACF,KAAK,QAAQ;QACX,IAAI,CAACF,OAAO,GAAGA,OAAO;QACtB;MACF;QACE,IAAKA,OAAO,IAAID,QAAQ,CAACE,QAAQ,EAAG;UAClC,IAAI,CAACD,OAAO,GAAGD,QAAQ,CAACE,QAAQ,CAACD,OAAO,CAAC;QAC3C,CAAC,MACI;UACH,MAAM,IAAIG,KAAK,CAAC,4BAA4B,GAAGC,MAAM,CAACJ,OAAO,CAAC,GAAG,GAAG,CAAC;QACvE;QACA;IACJ;IACA,IAAI,CAACK,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,YAAY,GAAG,EAAE;EACxB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;EACAT,MAAM,CAACU,KAAK,GAAG,UAAUC,MAAM,EAAET,OAAO,EAAG;IACzC;IACA,IAAIU,EAAE,GAAG,IAAIX,QAAQ,CAAEC,OAAQ,CAAC;IAChC,OAAOU,EAAE,CAACC,MAAM,CAAEF,MAAO,CAAC;EAC5B,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAX,MAAM,CAACc,MAAM,GAAG,SAASA,MAAMA,CAAEH,MAAM,EAAGT,OAAO,EAAGa,OAAO,EAAG;IAC5D,IAAIC,KAAK,GAAGhB,MAAM,CAACiB,UAAU,CAAEN,MAAM,EAAGT,OAAO,EAAGa,OAAQ,CAAC;IAE3D,OAAOf,MAAM,CAACkB,YAAY,CAAEF,KAAM,CAAC;EACrC,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAhB,MAAM,CAACiB,UAAU,GAAG,SAASA,UAAUA,CAAED,KAAK,EAAEd,OAAO,EAAGa,OAAO,EAAG;IAClE;IACA,IAAK,OAAOC,KAAK,KAAI,QAAQ,EAAGA,KAAK,GAAG,IAAI,CAACN,KAAK,CAAEM,KAAK,EAAEd,OAAQ,CAAC;;IAEpE;;IAEA;IACA,IAAIiB,KAAK,GAAGC,YAAY,CAAEJ,KAAM,CAAC;MAC7BK,IAAI,GAAG,CAAC,CAAC;IAEb,IAAKF,KAAK,IAAIA,KAAK,CAACG,UAAU,EAAG;MAC/BD,IAAI,GAAGF,KAAK,CAACG,UAAU;IACzB;IAEA,IAAIC,IAAI,GAAGC,oBAAoB,CAAER,KAAK,EAAEK,IAAI,EAAGN,OAAQ,CAAC;IACxDU,gBAAgB,CAAEF,IAAK,CAAC;IACxB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,SAASG,iBAAiBA,CAAA,EAAG;IAC3B,OAAO,qBAAqB,GACpBC,MAAM,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,GACvB,IAAI,GACJD,MAAM,CAAC,IAAI,CAACE,QAAQ,CAAC,GACrB,IAAI,GACJF,MAAM,CAAC,IAAI,CAACG,UAAU,CAAC,GACvB,IAAI;EACd;;EAEA;EACA,SAASC,gBAAgBA,CAAA,EAAG;IAC1B,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;IAC1B,OAAO,qBAAqB,GACpBD,IAAI,CAACE,OAAO,CAAC,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC,GAC7B,IAAI,GACJI,IAAI,CAACE,OAAO,CAAC,IAAI,CAACL,QAAQ,CAAC,GAC3B,IAAI,GACJG,IAAI,CAACE,OAAO,CAAC,IAAI,CAACJ,UAAU,CAAC,GAC7B,IAAI;EAEd;EAEA,IAAIK,QAAQ,GAAGlC,QAAQ,CAACkC,QAAQ,GAAG,UAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAE;IAC9D;IACA,IAAKC,SAAS,CAACC,MAAM,IAAI,CAAC,EAAGH,KAAK,GAAG,MAAM;IAE3C,IAAII,CAAC,GAAG,IAAInC,MAAM,CAAC8B,KAAK,CAAC;IACzBK,CAAC,CAACZ,QAAQ,GAAGQ,KAAK;IAClB;IACAI,CAAC,CAACP,OAAO,GAAGH,gBAAgB;IAC5BU,CAAC,CAACC,QAAQ,GAAGhB,iBAAiB;IAE9B,IAAKY,IAAI,IAAIK,SAAS,EACpBF,CAAC,CAACX,UAAU,GAAGQ,IAAI;IAErB,OAAOG,CAAC;EACV,CAAC;EAED,SAASG,WAAWA,CAAEC,GAAG,EAAG;IAC1B,IAAIC,CAAC,GAAG,CAAC;MAAEC,CAAC,GAAG,CAAC,CAAC;IACjB,OAAQ,CAAEA,CAAC,GAAGF,GAAG,CAACG,OAAO,CAAC,IAAI,EAAED,CAAC,GAAG,CAAC,CAAC,MAAO,CAAC,CAAC,EAAGD,CAAC,EAAE;IACrD,OAAOA,CAAC;EACV;;EAEA;EACA7C,QAAQ,CAACgD,SAAS,CAACC,YAAY,GAAG,SAASC,WAAWA,CAAEnC,KAAK,EAAEoC,SAAS,EAAG;IACzEpC,KAAK,GAAGA,KAAK,CAACqC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;IAC5C;IACA;IACA,IAAIC,EAAE,GAAG,mCAAmC;MACxCC,MAAM,GAAG,EAAE;MACXC,CAAC;IAEL,IAAIC,OAAO,GAAG,CAAC;IAEf,IAAK,CAAED,CAAC,GAAG,UAAU,CAACE,IAAI,CAAC1C,KAAK,CAAC,KAAM,IAAI,EAAG;MAC5C;MACAyC,OAAO,IAAIb,WAAW,CAAEY,CAAC,CAAC,CAAC,CAAE,CAAC;MAC9BF,EAAE,CAACK,SAAS,GAAGH,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM;IAC5B;IAEA,OAAQ,CAAEgB,CAAC,GAAGF,EAAE,CAACI,IAAI,CAAC1C,KAAK,CAAC,MAAO,IAAI,EAAG;MACxC,IAAIwC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE;QACjBA,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;QACXF,EAAE,CAACK,SAAS,EAAE;MAChB;MACAJ,MAAM,CAACK,IAAI,CAAEzB,QAAQ,CAAEqB,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEC,OAAQ,CAAE,CAAC;MAC9CA,OAAO,IAAIb,WAAW,CAAEY,CAAC,CAAC,CAAC,CAAE,CAAC;IAChC;IAEA,OAAOD,MAAM;EACf,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAtD,QAAQ,CAACgD,SAAS,CAACY,YAAY,GAAG,SAASA,YAAYA,CAAEzB,KAAK,EAAE0B,IAAI,EAAG;IACrE,IAAIC,GAAG,GAAG,IAAI,CAAC7D,OAAO,CAACkC,KAAK;MACxB4B,GAAG,GAAGD,GAAG,CAACE,SAAS;IAEvB,IAAK,UAAU,IAAIF,GAAG,EAAG;MACvB,OAAOA,GAAG,CAACG,QAAQ,CAACC,IAAI,CAAC,IAAI,EAAE/B,KAAK,EAAE0B,IAAI,CAAC;IAC7C;IAEA,KAAM,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,GAAG,CAACxB,MAAM,EAAEO,CAAC,EAAE,EAAG;MACrC;MACA,IAAIqB,GAAG,GAAGL,GAAG,CAAEC,GAAG,CAACjB,CAAC,CAAC,CAAE,CAACoB,IAAI,CAAE,IAAI,EAAE/B,KAAK,EAAE0B,IAAK,CAAC;MACjD,IAAKM,GAAG,EAAG;QACT;QACA,IAAK,CAACC,OAAO,CAACD,GAAG,CAAC,IAAMA,GAAG,CAAC5B,MAAM,GAAG,CAAC,IAAI,CAAG6B,OAAO,CAACD,GAAG,CAAC,CAAC,CAAC,CAAK,EAC9D,IAAI,CAACE,KAAK,CAACN,GAAG,CAACjB,CAAC,CAAC,EAAE,8BAA8B,CAAC;QACpD;QACA,OAAOqB,GAAG;MACZ;IACF;;IAEA;IACA,OAAO,EAAE;EACX,CAAC;EAEDnE,QAAQ,CAACgD,SAAS,CAACsB,aAAa,GAAG,SAASA,aAAaA,CAAEnC,KAAK,EAAG;IACjE,OAAO,IAAI,CAAClC,OAAO,CAACsE,MAAM,CAACN,QAAQ,CAACC,IAAI,CAAE,IAAI,EAAE7D,MAAM,CAAE8B,KAAM,CAAE,CAAC;EACnE,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;EACA;EACAnC,QAAQ,CAACgD,SAAS,CAACpC,MAAM,GAAG,SAASA,MAAMA,CAAEF,MAAM,EAAE8D,WAAW,EAAG;IACjE,IAAIlB,MAAM,GAAG5C,MAAM,YAAY+D,KAAK,GAAG/D,MAAM,GAAG,IAAI,CAACuC,YAAY,CAAEvC,MAAO,CAAC;;IAE3E;IACA,IAAIgE,QAAQ,GAAG,IAAI,CAACC,IAAI;IACxB,IAAI;MACF,IAAI,CAACA,IAAI,GAAGH,WAAW,IAAI,IAAI,CAACG,IAAI,IAAI,CAAE,UAAU,CAAE;MAEtDrB,MAAM,EACN,OAAQA,MAAM,CAACf,MAAM,EAAG;QACtB,IAAIqC,CAAC,GAAG,IAAI,CAAChB,YAAY,CAAEN,MAAM,CAACuB,KAAK,CAAC,CAAC,EAAEvB,MAAO,CAAC;;QAEnD;QACA,IAAK,CAACsB,CAAC,CAACrC,MAAM,EAAG,SAASe,MAAM;QAEhC,IAAI,CAACqB,IAAI,CAAChB,IAAI,CAACmB,KAAK,CAAE,IAAI,CAACH,IAAI,EAAEC,CAAE,CAAC;MACtC;MACA,OAAO,IAAI,CAACD,IAAI;IAClB,CAAC,SACO;MACN,IAAKH,WAAW,EAAG;QACjB,IAAI,CAACG,IAAI,GAAGD,QAAQ;MACtB;IACF;EACF,CAAC;;EAED;EACA1E,QAAQ,CAACgD,SAAS,CAACqB,KAAK,GAAG,YAAY;IACrC,IAAIU,IAAI,GAAGN,KAAK,CAACzB,SAAS,CAACgC,KAAK,CAACd,IAAI,CAAE5B,SAAS,CAAC;IACjDyC,IAAI,CAACE,OAAO,CAAC,IAAI,CAACzE,YAAY,CAAC;IAC/B,IAAK,OAAO0E,KAAK,KAAK,WAAW,EAC7BA,KAAK,CAACJ,KAAK,CAAEI,KAAK,EAAEH,IAAK,CAAC;IAC9B,IAAK,OAAOI,OAAO,KAAK,WAAW,IAAI,OAAOA,OAAO,CAACC,GAAG,KAAK,WAAW,EACrED,OAAO,CAACC,GAAG,CAACN,KAAK,CAAE,IAAI,EAAEC,IAAK,CAAC;EACrC,CAAC;EAED/E,QAAQ,CAACgD,SAAS,CAACqC,kBAAkB,GAAG,UAAUhC,EAAE,EAAElB,KAAK,EAAEmD,EAAE,EAAG;IAChE;IACA,IAAI/B,CAAC;MACDqB,CAAC,GAAGzC,KAAK,CAACoD,OAAO,CAAC,CAAC;IAEvB,OAAQX,CAAC,CAACrC,MAAM,IAAI,CAACgB,CAAC,GAAGF,EAAE,CAACI,IAAI,CAACmB,CAAC,CAAC,KAAM,IAAI,EAAG;MAC9CA,CAAC,GAAGA,CAAC,CAACY,MAAM,CAAEjC,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAO,CAAC;MAC3B+C,EAAE,CAACpB,IAAI,CAAC,IAAI,EAAEX,CAAC,CAAC;IAClB;IACA,OAAOqB,CAAC;EACV,CAAC;;EAED;AACA;AACA;AACA;AACA;EACA5E,QAAQ,CAACE,QAAQ,GAAG,CAAC,CAAC;;EAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAF,QAAQ,CAACE,QAAQ,CAACC,MAAM,GAAG;IACzBgC,KAAK,EAAE;MACLsD,SAAS,EAAE,SAASA,SAASA,CAAEtD,KAAK,EAAE0B,IAAI,EAAG;QAC3C,IAAIN,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAAE,mCAAoC,CAAC;QAE1D,IAAK,CAACnC,CAAC,EAAG,OAAOb,SAAS;QAE1B,IAAIiD,MAAM,GAAG,CAAE,QAAQ,EAAE;UAAEC,KAAK,EAAErC,CAAC,CAAE,CAAC,CAAE,CAAChB;QAAO,CAAC,CAAE;QACnDkC,KAAK,CAACzB,SAAS,CAACW,IAAI,CAACmB,KAAK,CAACa,MAAM,EAAE,IAAI,CAACrB,aAAa,CAACf,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC;QAE9D,IAAKA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAGJ,KAAK,CAACI,MAAM,EAC7BsB,IAAI,CAACoB,OAAO,CAAE/C,QAAQ,CAAEC,KAAK,CAACqD,MAAM,CAAEjC,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAO,CAAC,EAAEJ,KAAK,CAACP,QAAQ,EAAEO,KAAK,CAACN,UAAU,GAAG,CAAE,CAAE,CAAC;QAE/F,OAAO,CAAE8D,MAAM,CAAE;MACnB,CAAC;MAEDE,YAAY,EAAE,SAASA,YAAYA,CAAE1D,KAAK,EAAE0B,IAAI,EAAG;QACjD,IAAIN,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAAE,4BAA6B,CAAC;QAEnD,IAAK,CAACnC,CAAC,EAAG,OAAOb,SAAS;QAE1B,IAAIkD,KAAK,GAAKrC,CAAC,CAAE,CAAC,CAAE,KAAK,GAAG,GAAK,CAAC,GAAG,CAAC;QACtC,IAAIoC,MAAM,GAAG,CAAE,QAAQ,EAAE;UAAEC,KAAK,EAAGA;QAAM,CAAC,EAAErC,CAAC,CAAE,CAAC,CAAE,CAAE;QAEpD,IAAKA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAGJ,KAAK,CAACI,MAAM,EAC7BsB,IAAI,CAACoB,OAAO,CAAE/C,QAAQ,CAAEC,KAAK,CAACqD,MAAM,CAAEjC,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAO,CAAC,EAAEJ,KAAK,CAACP,QAAQ,EAAEO,KAAK,CAACN,UAAU,GAAG,CAAE,CAAE,CAAC;QAE/F,OAAO,CAAE8D,MAAM,CAAE;MACnB,CAAC;MAEDG,IAAI,EAAE,SAASA,IAAIA,CAAE3D,KAAK,EAAE0B,IAAI,EAAG;QACjC;QACA;QACA;QACA;QACA;;QAEA,IAAIkC,GAAG,GAAG,EAAE;UACR1C,EAAE,GAAG,2BAA2B;UAChC2C,KAAK;;QAET;QACA,IAAK,CAAC7D,KAAK,CAACuD,KAAK,CAAErC,EAAG,CAAC,EAAG,OAAOX,SAAS;QAE1CuD,YAAY,EACZ,GAAG;UACD;UACA,IAAIrB,CAAC,GAAG,IAAI,CAACS,kBAAkB,CACrBhC,EAAE,EAAElB,KAAK,CAACoD,OAAO,CAAC,CAAC,EAAE,UAAUhC,CAAC,EAAG;YAAEwC,GAAG,CAACpC,IAAI,CAAEJ,CAAC,CAAC,CAAC,CAAE,CAAC;UAAE,CAAE,CAAC;UAEpE,IAAKqB,CAAC,CAACrC,MAAM,EAAG;YACd;YACAsB,IAAI,CAACoB,OAAO,CAAE/C,QAAQ,CAAC0C,CAAC,EAAEzC,KAAK,CAACP,QAAQ,CAAE,CAAC;YAC3C,MAAMqE,YAAY;UACpB,CAAC,MACI,IAAKpC,IAAI,CAACtB,MAAM,EAAG;YACtB;YACA,IAAK,CAACsB,IAAI,CAAC,CAAC,CAAC,CAAC6B,KAAK,CAAErC,EAAG,CAAC,EAAG,MAAM4C,YAAY;;YAE9C;YACAF,GAAG,CAACpC,IAAI,CAAGxB,KAAK,CAACP,QAAQ,CAACwB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC8C,SAAS,CAAC,CAAC,CAAE,CAAC;YAE9D/D,KAAK,GAAG0B,IAAI,CAACgB,KAAK,CAAC,CAAC;UACtB,CAAC,MACI;YACH,MAAMoB,YAAY;UACpB;QACF,CAAC,QAAS,IAAI;QAEd,OAAO,CAAE,CAAE,YAAY,EAAEF,GAAG,CAACI,IAAI,CAAC,IAAI,CAAC,CAAE,CAAE;MAC7C,CAAC;MAEDC,SAAS,EAAE,SAASA,SAASA,CAAEjE,KAAK,EAAE0B,IAAI,EAAG;QAC3C;QACA,IAAIN,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAAE,wEAAyE,CAAC;QAE/F,IAAK,CAACnC,CAAC,EAAG;UACR,OAAOb,SAAS;QAClB;QAEA,IAAI2D,MAAM,GAAG,CAAE,CAAE,IAAI,CAAE,CAAE;;QAEzB;QACA,IAAK9C,CAAC,CAAE,CAAC,CAAE,EAAG;UACZ8C,MAAM,CAACpB,OAAO,CAACH,KAAK,CAAEuB,MAAM,EAAE,IAAI,CAACzC,YAAY,CAAEL,CAAC,CAAE,CAAC,CAAE,EAAE,EAAG,CAAE,CAAC;QACjE;;QAEA;QACA,IAAKA,CAAC,CAAE,CAAC,CAAE,EAAG;UACZM,IAAI,CAACoB,OAAO,CAAE/C,QAAQ,CAAEqB,CAAC,CAAE,CAAC,CAAG,CAAE,CAAC;QACpC;QAEA,OAAO8C,MAAM;MACf,CAAC;MAED;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,KAAK,EAAG,YAAY;QAClB;QACA,IAAIC,QAAQ,GAAG,eAAe;UAC1BC,WAAW,GAAG,OAAO;UACrBC,WAAW,GAAG,OAAO;UACrB;UACAC,UAAU,GAAG,IAAIC,MAAM,CAAE,YAAY,GAAGJ,QAAQ,GAAG,SAAU,CAAC;UAC9DK,SAAS,GAAG,oBAAoB;;QAEpC;QACA;QACA,SAASC,eAAeA,CAAEC,KAAK,EAAG;UAEhC,OAAO,IAAIH,MAAM;UACf;UACA,OAAO,GAAGC,SAAS,GAAG,KAAK,GAAGE,KAAK,GAAG,WAAW,GAAGP,QAAQ,GAAG,SAAS;UACxE;UACA,IAAI,GAAGK,SAAS,GAAG,KAAK,IAAIE,KAAK,GAAC,CAAC,CAAC,GAAG,YACzC,CAAC;QACH;QACA,SAASC,UAAUA,CAAEhG,KAAK,EAAG;UAC3B,OAAOA,KAAK,CAACqC,OAAO,CAAE,WAAW,EAAE,MAAO,CAAC;QAC7C;;QAEA;QACA;QACA,SAAS4D,GAAGA,CAACC,EAAE,EAAEC,KAAK,EAAE3C,MAAM,EAAE4C,EAAE,EAAE;UAClC,IAAKD,KAAK,EAAG;YACXD,EAAE,CAACtD,IAAI,CAAE,CAAE,MAAM,CAAE,CAACyD,MAAM,CAAC7C,MAAM,CAAE,CAAC;YACpC;UACF;UACA;UACA,IAAI8C,MAAM,GAAGJ,EAAE,CAACA,EAAE,CAAC1E,MAAM,GAAE,CAAC,CAAC,YAAYkC,KAAK,IAAIwC,EAAE,CAACA,EAAE,CAAC1E,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,GACnE0E,EAAE,CAACA,EAAE,CAAC1E,MAAM,GAAE,CAAC,CAAC,GAChB0E,EAAE;;UAEf;UACA,IAAKE,EAAE,IAAIF,EAAE,CAAC1E,MAAM,GAAG,CAAC,EAAGgC,MAAM,CAACU,OAAO,CAACkC,EAAE,CAAC;UAE7C,KAAM,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyB,MAAM,CAAChC,MAAM,EAAEO,CAAC,EAAE,EAAG;YACxC,IAAIwE,IAAI,GAAG/C,MAAM,CAACzB,CAAC,CAAC;cAChByE,MAAM,GAAG,OAAOD,IAAI,IAAI,QAAQ;YACpC,IAAKC,MAAM,IAAIF,MAAM,CAAC9E,MAAM,GAAG,CAAC,IAAI,OAAO8E,MAAM,CAACA,MAAM,CAAC9E,MAAM,GAAC,CAAC,CAAC,IAAI,QAAQ,EAAG;cAC/E8E,MAAM,CAAEA,MAAM,CAAC9E,MAAM,GAAC,CAAC,CAAE,IAAI+E,IAAI;YACnC,CAAC,MACI;cACHD,MAAM,CAAC1D,IAAI,CAAE2D,IAAK,CAAC;YACrB;UACF;QACF;;QAEA;QACA;QACA,SAASE,oBAAoBA,CAAEV,KAAK,EAAExD,MAAM,EAAG;UAE7C,IAAID,EAAE,GAAG,IAAIsD,MAAM,CAAE,IAAI,GAAGC,SAAS,GAAG,GAAG,GAAGE,KAAK,GAAG,aAAc,CAAC;YACjE1D,OAAO,GAAG,IAAIuD,MAAM,CAAC,GAAG,GAAGC,SAAS,GAAG,GAAG,GAAGE,KAAK,GAAG,GAAG,EAAE,IAAI,CAAC;YAC/Df,GAAG,GAAG,EAAE;UAEZ,OAAQzC,MAAM,CAACf,MAAM,GAAG,CAAC,EAAG;YAC1B,IAAKc,EAAE,CAACI,IAAI,CAAEH,MAAM,CAAC,CAAC,CAAE,CAAC,EAAG;cAC1B,IAAIsB,CAAC,GAAGtB,MAAM,CAACuB,KAAK,CAAC,CAAC;gBAClB;gBACA4C,CAAC,GAAG7C,CAAC,CAACxB,OAAO,CAAEA,OAAO,EAAE,EAAE,CAAC;cAE/B2C,GAAG,CAACpC,IAAI,CAAEzB,QAAQ,CAAEuF,CAAC,EAAE7C,CAAC,CAAChD,QAAQ,EAAEgD,CAAC,CAAC/C,UAAW,CAAE,CAAC;YACrD,CAAC,MACI;cACH;YACF;UACF;UACA,OAAOkE,GAAG;QACZ;;QAEA;QACA,SAAS2B,YAAYA,CAAClF,CAAC,EAAEM,CAAC,EAAE6E,KAAK,EAAE;UACjC,IAAIC,IAAI,GAAGpF,CAAC,CAACoF,IAAI;UACjB,IAAIC,OAAO,GAAGD,IAAI,CAACA,IAAI,CAACrF,MAAM,GAAC,CAAC,CAAC;UAEjC,IAAKsF,OAAO,CAAC,CAAC,CAAC,YAAYpD,KAAK,IAAIoD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAG;YAC5D;UACF;UACA,IAAK/E,CAAC,GAAG,CAAC,IAAI6E,KAAK,CAACpF,MAAM,EAAG;YAC3B;YACA;YACAsF,OAAO,CAAClE,IAAI,CAAE,CAAC,MAAM,CAAC,CAACyD,MAAM,CAAES,OAAO,CAACC,MAAM,CAAC,CAAC,EAAED,OAAO,CAACtF,MAAM,GAAG,CAAC,CAAE,CAAE,CAAC;UAC1E,CAAC,MACI;YACH,IAAIwF,OAAO,GAAGF,OAAO,CAACG,GAAG,CAAC,CAAC;YAC3BH,OAAO,CAAClE,IAAI,CAAE,CAAC,MAAM,CAAC,CAACyD,MAAM,CAAES,OAAO,CAACC,MAAM,CAAC,CAAC,EAAED,OAAO,CAACtF,MAAM,GAAG,CAAC,CAAE,CAAC,EAAEwF,OAAQ,CAAC;UACnF;QACF;;QAEA;QACA,OAAO,UAAU5F,KAAK,EAAE0B,IAAI,EAAG;UAC7B,IAAIN,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAAEgB,UAAW,CAAC;UACjC,IAAK,CAACnD,CAAC,EAAG,OAAOb,SAAS;UAE1B,SAASuF,SAASA,CAAE1E,CAAC,EAAG;YACtB,IAAIqE,IAAI,GAAGpB,WAAW,CAAC/C,IAAI,CAAEF,CAAC,CAAC,CAAC,CAAE,CAAC,GACxB,CAAC,YAAY,CAAC,GACd,CAAC,YAAY,CAAC;YAEzBoE,KAAK,CAAChE,IAAI,CAAE;cAAEiE,IAAI,EAAEA,IAAI;cAAEM,MAAM,EAAE3E,CAAC,CAAC,CAAC;YAAE,CAAE,CAAC;YAC1C,OAAOqE,IAAI;UACb;UAGA,IAAID,KAAK,GAAG,EAAE;YAAE;YACZC,IAAI,GAAGK,SAAS,CAAE1E,CAAE,CAAC;YACrBsE,OAAO;YACPX,KAAK,GAAG,KAAK;YACbnB,GAAG,GAAG,CAAE4B,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAE;YACvB9E,CAAC;;UAEL;UACAqF,YAAY,EACZ,OAAQ,IAAI,EAAG;YACb;YACA,IAAInC,KAAK,GAAG7D,KAAK,CAACiG,KAAK,CAAE,QAAS,CAAC;;YAEnC;YACA;YACA,IAAIC,aAAa,GAAG,EAAE;;YAEtB;YACAC,YAAY,EACZ,KAAM,IAAI9E,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGwC,KAAK,CAACzD,MAAM,EAAEiB,OAAO,EAAE,EAAG;cACzD,IAAI2D,EAAE,GAAG,EAAE;gBACPoB,CAAC,GAAGvC,KAAK,CAACxC,OAAO,CAAC,CAACJ,OAAO,CAAC,KAAK,EAAE,UAASP,CAAC,EAAE;kBAAEsE,EAAE,GAAGtE,CAAC;kBAAE,OAAO,EAAE;gBAAE,CAAC,CAAC;;cAEzE;cACA,IAAI2F,OAAO,GAAG3B,eAAe,CAAEc,KAAK,CAACpF,MAAO,CAAC;cAE7CgB,CAAC,GAAGgF,CAAC,CAAC7C,KAAK,CAAE8C,OAAQ,CAAC;cACtB;;cAEA;cACA,IAAKjF,CAAC,CAAC,CAAC,CAAC,KAAKb,SAAS,EAAG;gBACxB;gBACA,IAAK2F,aAAa,CAAC9F,MAAM,EAAG;kBAC1ByE,GAAG,CAAEa,OAAO,EAAEX,KAAK,EAAE,IAAI,CAAC5C,aAAa,CAAE+D,aAAc,CAAC,EAAElB,EAAG,CAAC;kBAC9D;kBACAD,KAAK,GAAG,KAAK;kBACbmB,aAAa,GAAG,EAAE;gBACpB;gBAEA9E,CAAC,CAAC,CAAC,CAAC,GAAGwD,UAAU,CAAExD,CAAC,CAAC,CAAC,CAAE,CAAC;gBACzB,IAAIkF,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACpF,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAC,CAAC,CAAC,GAAC,CAAC;gBAC9C;gBACA,IAAKkG,YAAY,GAAGd,KAAK,CAACpF,MAAM,EAAG;kBACjC;kBACA;kBACAqF,IAAI,GAAGK,SAAS,CAAE1E,CAAE,CAAC;kBACrBsE,OAAO,CAAClE,IAAI,CAAEiE,IAAK,CAAC;kBACpBC,OAAO,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAE,UAAU,CAAE;gBACpC,CAAC,MACI;kBACH;kBACA;kBACA;kBACA;kBACA,IAAIgB,KAAK,GAAG,KAAK;kBACjB,KAAM9F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6E,KAAK,CAACpF,MAAM,EAAEO,CAAC,EAAE,EAAG;oBACnC,IAAK6E,KAAK,CAAE7E,CAAC,CAAE,CAACoF,MAAM,IAAI3E,CAAC,CAAC,CAAC,CAAC,EAAG;oBACjCqE,IAAI,GAAGD,KAAK,CAAE7E,CAAC,CAAE,CAAC8E,IAAI;oBACtBD,KAAK,CAACG,MAAM,CAAEhF,CAAC,GAAC,CAAC,EAAE6E,KAAK,CAACpF,MAAM,IAAIO,CAAC,GAAC,CAAC,CAAE,CAAC;oBACzC8F,KAAK,GAAG,IAAI;oBACZ;kBACF;kBAEA,IAAI,CAACA,KAAK,EAAE;oBACV;oBACAH,YAAY,EAAE;oBACd,IAAKA,YAAY,IAAId,KAAK,CAACpF,MAAM,EAAG;sBAClCoF,KAAK,CAACG,MAAM,CAACW,YAAY,EAAEd,KAAK,CAACpF,MAAM,GAAGkG,YAAY,CAAC;sBACvD;sBACAb,IAAI,GAAGD,KAAK,CAACc,YAAY,GAAC,CAAC,CAAC,CAACb,IAAI;sBACjC;oBACF,CAAC,MACI;sBACH;sBACAA,IAAI,GAAGK,SAAS,CAAC1E,CAAC,CAAC;sBACnBsE,OAAO,CAAClE,IAAI,CAACiE,IAAI,CAAC;oBACpB;kBACF;;kBAEA;kBACAC,OAAO,GAAG,CAAE,UAAU,CAAE;kBACxBD,IAAI,CAACjE,IAAI,CAACkE,OAAO,CAAC;gBACpB,CAAC,CAAC;gBACFV,EAAE,GAAG,EAAE;cACT;;cAEA;cACA,IAAKoB,CAAC,CAAChG,MAAM,GAAGgB,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAG;gBAC5B8F,aAAa,IAAIlB,EAAE,GAAGoB,CAAC,CAAC/C,MAAM,CAAEjC,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAO,CAAC;cAC/C;YACF,CAAC,CAAC;;YAEF,IAAK8F,aAAa,CAAC9F,MAAM,EAAG;cAC1ByE,GAAG,CAAEa,OAAO,EAAEX,KAAK,EAAE,IAAI,CAAC5C,aAAa,CAAE+D,aAAc,CAAC,EAAElB,EAAG,CAAC;cAC9D;cACAD,KAAK,GAAG,KAAK;cACbmB,aAAa,GAAG,EAAE;YACpB;;YAEA;YACA;YACA,IAAIQ,SAAS,GAAGrB,oBAAoB,CAAEG,KAAK,CAACpF,MAAM,EAAEsB,IAAK,CAAC;;YAE1D;YACA,IAAKgF,SAAS,CAACtG,MAAM,GAAG,CAAC,EAAG;cAC1B;cACAuG,OAAO,CAAEnB,KAAK,EAAED,YAAY,EAAE,IAAI,CAAC;cAEnCG,OAAO,CAAClE,IAAI,CAACmB,KAAK,CAAE+C,OAAO,EAAE,IAAI,CAACjH,MAAM,CAAEiI,SAAS,EAAE,EAAG,CAAE,CAAC;YAC7D;YAEA,IAAIE,UAAU,GAAGlF,IAAI,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAAC0B,OAAO,CAAC,CAAC,IAAI,EAAE;YAEnD,IAAKwD,UAAU,CAACrD,KAAK,CAACgB,UAAU,CAAC,IAAIqC,UAAU,CAACrD,KAAK,CAAE,IAAK,CAAC,EAAG;cAC9DvD,KAAK,GAAG0B,IAAI,CAACgB,KAAK,CAAC,CAAC;;cAEpB;cACA,IAAImE,EAAE,GAAG,IAAI,CAAC/I,OAAO,CAACkC,KAAK,CAACiE,SAAS,CAAEjE,KAAK,EAAE0B,IAAK,CAAC;cAEpD,IAAKmF,EAAE,EAAG;gBACRjD,GAAG,CAACpC,IAAI,CAACmB,KAAK,CAACiB,GAAG,EAAEiD,EAAE,CAAC;gBACvB;cACF;;cAEA;cACAF,OAAO,CAAEnB,KAAK,EAAED,YAAY,EAAE,IAAI,CAAC;cAEnCR,KAAK,GAAG,IAAI;cACZ,SAASiB,YAAY;YACvB;YACA;UACF,CAAC,CAAC;;UAEF,OAAOpC,GAAG;QACZ,CAAC;MACH,CAAC,CAAE,CAAC;MAEJkD,UAAU,EAAE,SAASA,UAAUA,CAAE9G,KAAK,EAAE0B,IAAI,EAAG;QAC7C,IAAK,CAAC1B,KAAK,CAACuD,KAAK,CAAE,KAAM,CAAC,EACxB,OAAOhD,SAAS;QAElB,IAAI2D,MAAM,GAAG,EAAE;;QAEf;QACA;QACA;QACA;QACA;QACA,IAAKlE,KAAK,CAAE,CAAC,CAAE,IAAI,GAAG,EAAG;UACvB,IAAI6D,KAAK,GAAG7D,KAAK,CAACiG,KAAK,CAAE,IAAK,CAAC;YAC3Bc,IAAI,GAAG,EAAE;YACT1F,OAAO,GAAGrB,KAAK,CAACN,UAAU;;UAE9B;UACA,OAAQmE,KAAK,CAACzD,MAAM,IAAIyD,KAAK,CAAE,CAAC,CAAE,CAAE,CAAC,CAAE,IAAI,GAAG,EAAG;YAC7CkD,IAAI,CAACvF,IAAI,CAAEqC,KAAK,CAACnB,KAAK,CAAC,CAAE,CAAC;YAC1BrB,OAAO,EAAE;UACb;UAEA,IAAI2F,QAAQ,GAAGjH,QAAQ,CAAEgH,IAAI,CAAC/C,IAAI,CAAE,IAAK,CAAC,EAAE,IAAI,EAAEhE,KAAK,CAACN,UAAW,CAAC;UACpEwE,MAAM,CAAC1C,IAAI,CAACmB,KAAK,CAAEuB,MAAM,EAAE,IAAI,CAACzC,YAAY,CAAEuF,QAAQ,EAAE,EAAG,CAAE,CAAC;UAC9D;UACAhH,KAAK,GAAGD,QAAQ,CAAE8D,KAAK,CAACG,IAAI,CAAE,IAAK,CAAC,EAAEhE,KAAK,CAACP,QAAQ,EAAE4B,OAAQ,CAAC;QACjE;;QAGA;QACA,OAAQK,IAAI,CAACtB,MAAM,IAAIsB,IAAI,CAAE,CAAC,CAAE,CAAE,CAAC,CAAE,IAAI,GAAG,EAAG;UAC7C,IAAIe,CAAC,GAAGf,IAAI,CAACgB,KAAK,CAAC,CAAC;UACpB1C,KAAK,GAAGD,QAAQ,CAAEC,KAAK,GAAGA,KAAK,CAACP,QAAQ,GAAGgD,CAAC,EAAEA,CAAC,CAAChD,QAAQ,EAAEO,KAAK,CAACN,UAAW,CAAC;QAC9E;;QAEA;QACA,IAAId,KAAK,GAAGoB,KAAK,CAACiB,OAAO,CAAE,QAAQ,EAAE,EAAG,CAAC;UACrCsB,QAAQ,GAAG,IAAI,CAACC,IAAI;UACpByE,cAAc,GAAG,IAAI,CAACxI,MAAM,CAAEG,KAAK,EAAE,CAAE,YAAY,CAAG,CAAC;UACvDsI,IAAI,GAAGlI,YAAY,CAAEiI,cAAe,CAAC;;QAEzC;QACA,IAAKC,IAAI,IAAIA,IAAI,CAAChI,UAAU,EAAG;UAC7B,OAAOgI,IAAI,CAAChI,UAAU;UACtB;UACA,IAAKiI,OAAO,CAAED,IAAK,CAAC,EAAG;YACrBD,cAAc,CAACtB,MAAM,CAAE,CAAC,EAAE,CAAE,CAAC;UAC/B;QACF;QAEAzB,MAAM,CAAC1C,IAAI,CAAEyF,cAAe,CAAC;QAC7B,OAAO/C,MAAM;MACf,CAAC;MAEDkD,aAAa,EAAE,SAASA,aAAaA,CAAEpH,KAAK,EAAE0B,IAAI,EAAE;QAClD,IAAIR,EAAE,GAAG,8DAA8D;QACvE;;QAEA,IAAK,CAAClB,KAAK,CAACuD,KAAK,CAACrC,EAAE,CAAC,EACnB,OAAOX,SAAS;;QAElB;QACA,IAAK,CAACvB,YAAY,CAAE,IAAI,CAACwD,IAAK,CAAC,EAAG;UAChC,IAAI,CAACA,IAAI,CAACmD,MAAM,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;QAC9B;QAEA,IAAI5G,KAAK,GAAGC,YAAY,CAAE,IAAI,CAACwD,IAAK,CAAC;;QAErC;QACA,IAAKzD,KAAK,CAACG,UAAU,KAAKqB,SAAS,EAAG;UACpCxB,KAAK,CAACG,UAAU,GAAG,CAAC,CAAC;QACvB;QAEA,IAAIuD,CAAC,GAAG,IAAI,CAACS,kBAAkB,CAAChC,EAAE,EAAElB,KAAK,EAAE,UAAUoB,CAAC,EAAG;UAEvD,IAAKA,CAAC,CAAC,CAAC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAIA,CAAC,CAAC,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAC,CAAC,CAAC,IAAI,GAAG,EACvDgB,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAAC2C,SAAS,CAAE,CAAC,EAAE3C,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAG,CAAE,CAAC;UAE7C,IAAIiH,GAAG,GAAGtI,KAAK,CAACG,UAAU,CAAEkC,CAAC,CAAC,CAAC,CAAC,CAACkG,WAAW,CAAC,CAAC,CAAE,GAAG;YACjDC,IAAI,EAAEnG,CAAC,CAAC,CAAC;UACX,CAAC;UAED,IAAKA,CAAC,CAAC,CAAC,CAAC,KAAKb,SAAS,EACrB8G,GAAG,CAACG,KAAK,GAAGpG,CAAC,CAAC,CAAC,CAAC,CAAC,KACd,IAAKA,CAAC,CAAC,CAAC,CAAC,KAAKb,SAAS,EAC1B8G,GAAG,CAACG,KAAK,GAAGpG,CAAC,CAAC,CAAC,CAAC;QAEpB,CAAE,CAAC;QAEH,IAAKqB,CAAC,CAACrC,MAAM,EACXsB,IAAI,CAACoB,OAAO,CAAE/C,QAAQ,CAAE0C,CAAC,EAAEzC,KAAK,CAACP,QAAS,CAAE,CAAC;QAE/C,OAAO,EAAE;MACX,CAAC;MAEDgI,IAAI,EAAE,SAASA,IAAIA,CAAEzH,KAAK,EAAE0B,IAAI,EAAG;QACjC;QACA,OAAO,CAAE,CAAC,MAAM,CAAC,CAACuD,MAAM,CAAE,IAAI,CAAC9C,aAAa,CAAEnC,KAAM,CAAE,CAAC,CAAE;MAC3D;IACF;EACF,CAAC;EAEDnC,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACoE,MAAM,GAAG;IAE9BsF,cAAc,EAAE,SAASC,UAAUA,CAAEC,IAAI,EAAEC,cAAc,EAAEC,cAAc,EAAG;MAC1E,IAAI1G,CAAC;QACDY,GAAG;QACHT,SAAS,GAAG,CAAC;MAEjBsG,cAAc,GAAGA,cAAc,IAAI,IAAI,CAAC/J,OAAO,CAACsE,MAAM,CAAC2F,YAAY;MACnE,IAAI7G,EAAE,GAAG,IAAIsD,MAAM,CAAE,eAAe,IAAIqD,cAAc,CAACtJ,MAAM,IAAIsJ,cAAc,CAAC,GAAG,GAAI,CAAC;MAExFzG,CAAC,GAAGF,EAAE,CAACI,IAAI,CAAEsG,IAAK,CAAC;MACnB,IAAI,CAACxG,CAAC,EAAE;QACN;QACA,OAAO,CAAEwG,IAAI,CAACxH,MAAM,EAAEwH,IAAI,CAAE;MAC9B,CAAC,MACI,IAAKxG,CAAC,CAAC,CAAC,CAAC,EAAG;QACf;QACA,OAAO,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAEgB,CAAC,CAAC,CAAC,CAAC,CAAE;MAC9B;MAEA,IAAIY,GAAG;MACP,IAAKZ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAACtD,OAAO,CAACsE,MAAM,EAAG;QACjCJ,GAAG,GAAG,IAAI,CAAClE,OAAO,CAACsE,MAAM,CAAEhB,CAAC,CAAC,CAAC,CAAC,CAAE,CAACW,IAAI,CAC5B,IAAI,EACJ6F,IAAI,CAACvE,MAAM,CAAEjC,CAAC,CAAC4G,KAAM,CAAC,EAAE5G,CAAC,EAAE0G,cAAc,IAAI,EAAG,CAAC;MAC7D;MACA;MACA9F,GAAG,GAAGA,GAAG,IAAI,CAAEZ,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAEgB,CAAC,CAAC,CAAC,CAAC,CAAE;MAClC,OAAOY,GAAG;IACZ,CAAC;IAEDF,QAAQ,EAAE,SAASM,MAAMA,CAAEwF,IAAI,EAAEK,QAAQ,EAAG;MAE1C,IAAIC,GAAG,GAAG,EAAE;QACRlG,GAAG;MAEP,SAAS6C,GAAGA,CAACS,CAAC,EAAE;QACd;QACA,IAAK,OAAOA,CAAC,IAAI,QAAQ,IAAI,OAAO4C,GAAG,CAACA,GAAG,CAAC9H,MAAM,GAAC,CAAC,CAAC,IAAI,QAAQ,EAC/D8H,GAAG,CAAEA,GAAG,CAAC9H,MAAM,GAAC,CAAC,CAAE,IAAIkF,CAAC,CAAC,KAEzB4C,GAAG,CAAC1G,IAAI,CAAC8D,CAAC,CAAC;MACf;MAEA,OAAQsC,IAAI,CAACxH,MAAM,GAAG,CAAC,EAAG;QACxB4B,GAAG,GAAG,IAAI,CAAClE,OAAO,CAACsE,MAAM,CAACsF,cAAc,CAAC3F,IAAI,CAAC,IAAI,EAAE6F,IAAI,EAAEK,QAAQ,EAAEC,GAAI,CAAC;QACzEN,IAAI,GAAGA,IAAI,CAACvE,MAAM,CAAErB,GAAG,CAACU,KAAK,CAAC,CAAE,CAAC;QACjCiE,OAAO,CAAC3E,GAAG,EAAE6C,GAAI,CAAC;MACpB;MAEA,OAAOqD,GAAG;IACZ,CAAC;IAED;IACA;IACA,GAAG,EAAE,SAAAC,CAAA,EAAY,CAAC,CAAC;IACnB,GAAG,EAAE,SAAAC,CAAA,EAAY,CAAC,CAAC;IAEnBC,UAAU,EAAG,4BAA4B;IAEzC,IAAI,EAAE,SAASC,OAAOA,CAAEV,IAAI,EAAG;MAC7B;MACA;MACA,IAAK,IAAI,CAAC9J,OAAO,CAACsE,MAAM,CAACiG,UAAU,CAAC/G,IAAI,CAAEsG,IAAK,CAAC,EAC9C,OAAO,CAAE,CAAC,EAAEA,IAAI,CAACW,MAAM,CAAE,CAAE,CAAC,CAAE,CAAC;QAE/B;QACA,OAAO,CAAE,CAAC,EAAE,IAAI,CAAE;IACtB,CAAC;IAED,IAAI,EAAE,SAASC,KAAKA,CAAEZ,IAAI,EAAG;MAE3B;MACA;;MAEA;MACA;MACA,IAAIxG,CAAC,GAAGwG,IAAI,CAACrE,KAAK,CAAE,oEAAqE,CAAC;MAE1F,IAAKnC,CAAC,EAAG;QACP,IAAKA,CAAC,CAAC,CAAC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAIA,CAAC,CAAC,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAC,CAAC,CAAC,IAAI,GAAG,EACvDgB,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAAC2C,SAAS,CAAE,CAAC,EAAE3C,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAG,CAAE,CAAC;QAE7CgB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACtD,OAAO,CAACsE,MAAM,CAACN,QAAQ,CAACC,IAAI,CAAE,IAAI,EAAEX,CAAC,CAAC,CAAC,CAAC,EAAE,IAAK,CAAC,CAAC,CAAC,CAAC;QAE/D,IAAIrC,KAAK,GAAG;UAAE0J,GAAG,EAAErH,CAAC,CAAC,CAAC,CAAC;UAAEmG,IAAI,EAAEnG,CAAC,CAAC,CAAC,CAAC,IAAI;QAAG,CAAC;QAC3C,IAAKA,CAAC,CAAC,CAAC,CAAC,KAAKb,SAAS,EACrBxB,KAAK,CAACyI,KAAK,GAAGpG,CAAC,CAAC,CAAC,CAAC;QAEpB,OAAO,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAE,CAAE,KAAK,EAAErB,KAAK,CAAE,CAAE;MAC1C;;MAEA;MACAqC,CAAC,GAAGwG,IAAI,CAACrE,KAAK,CAAE,4BAA6B,CAAC;MAE9C,IAAKnC,CAAC,EAAG;QACP;QACA;QACA,OAAO,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAE,CAAE,SAAS,EAAE;UAAEqI,GAAG,EAAErH,CAAC,CAAC,CAAC,CAAC;UAAEiG,GAAG,EAAEjG,CAAC,CAAC,CAAC,CAAC,CAACkG,WAAW,CAAC,CAAC;UAAEoB,QAAQ,EAAEtH,CAAC,CAAC,CAAC;QAAE,CAAC,CAAE,CAAE;MAC/F;;MAEA;MACA,OAAO,CAAE,CAAC,EAAE,IAAI,CAAE;IACpB,CAAC;IAED,GAAG,EAAE,SAASuH,IAAIA,CAAEf,IAAI,EAAG;MAEzB,IAAIgB,IAAI,GAAG1K,MAAM,CAAC0J,IAAI,CAAC;MACvB;MACA,IAAI5F,GAAG,GAAGnE,QAAQ,CAACgL,cAAc,CAACC,iBAAiB,CAAC/G,IAAI,CAAE,IAAI,EAAE6F,IAAI,CAACvE,MAAM,CAAC,CAAC,CAAC,EAAE,GAAI,CAAC;;MAErF;MACA,IAAK,CAACrB,GAAG,EAAG,OAAO,CAAE,CAAC,EAAE,GAAG,CAAE;MAE7B,IAAI+G,QAAQ,GAAG,CAAC,GAAG/G,GAAG,CAAE,CAAC,CAAE;QACvBgH,QAAQ,GAAGhH,GAAG,CAAE,CAAC,CAAE;QACnB2G,IAAI;QACJ5J,KAAK;;MAET;MACA;MACA6I,IAAI,GAAGA,IAAI,CAACvE,MAAM,CAAE0F,QAAS,CAAC;;MAE9B;MACA;MACA;MACA;MACA;MACA;MACA,IAAI3H,CAAC,GAAGwG,IAAI,CAACrE,KAAK,CAAE,sDAAuD,CAAC;MAC5E,IAAKnC,CAAC,EAAG;QACP,IAAI6H,GAAG,GAAG7H,CAAC,CAAC,CAAC,CAAC;QACd2H,QAAQ,IAAI3H,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM;QAEvB,IAAK6I,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,IAAIA,GAAG,CAACA,GAAG,CAAC7I,MAAM,GAAC,CAAC,CAAC,IAAI,GAAG,EACnD6I,GAAG,GAAGA,GAAG,CAAClF,SAAS,CAAE,CAAC,EAAEkF,GAAG,CAAC7I,MAAM,GAAG,CAAE,CAAC;;QAE1C;QACA,IAAK,CAACgB,CAAC,CAAC,CAAC,CAAC,EAAG;UACX,IAAI8H,WAAW,GAAG,CAAC,CAAC,CAAC;UACrB,KAAM,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,GAAG,CAAC7I,MAAM,EAAE+I,GAAG,EAAE,EAAG;YAC3C,QAASF,GAAG,CAACE,GAAG,CAAC;cACjB,KAAK,GAAG;gBACND,WAAW,EAAE;gBACb;cACF,KAAK,GAAG;gBACN,IAAK,EAAEA,WAAW,IAAI,CAAC,EAAE;kBACvBH,QAAQ,IAAIE,GAAG,CAAC7I,MAAM,GAAG+I,GAAG;kBAC5BF,GAAG,GAAGA,GAAG,CAAClF,SAAS,CAAC,CAAC,EAAEoF,GAAG,CAAC;gBAC7B;gBACA;YACF;UACF;QACF;;QAEA;QACAF,GAAG,GAAG,IAAI,CAACnL,OAAO,CAACsE,MAAM,CAACN,QAAQ,CAACC,IAAI,CAAE,IAAI,EAAEkH,GAAG,EAAE,IAAK,CAAC,CAAC,CAAC,CAAC;QAE7DlK,KAAK,GAAG;UAAEwI,IAAI,EAAE0B,GAAG,IAAI;QAAG,CAAC;QAC3B,IAAK7H,CAAC,CAAC,CAAC,CAAC,KAAKb,SAAS,EACrBxB,KAAK,CAACyI,KAAK,GAAGpG,CAAC,CAAC,CAAC,CAAC;QAEpBuH,IAAI,GAAG,CAAE,MAAM,EAAE5J,KAAK,CAAE,CAACkG,MAAM,CAAE+D,QAAS,CAAC;QAC3C,OAAO,CAAED,QAAQ,EAAEJ,IAAI,CAAE;MAC3B;;MAEA;MACA;MACAvH,CAAC,GAAGwG,IAAI,CAACrE,KAAK,CAAE,eAAgB,CAAC;MAEjC,IAAKnC,CAAC,EAAG;QAEP2H,QAAQ,IAAI3H,CAAC,CAAE,CAAC,CAAE,CAAChB,MAAM;;QAEzB;QACArB,KAAK,GAAG;UAAEsI,GAAG,EAAE,CAAEjG,CAAC,CAAE,CAAC,CAAE,IAAIlD,MAAM,CAAC8K,QAAQ,CAAC,EAAG1B,WAAW,CAAC,CAAC;UAAGoB,QAAQ,EAAEE,IAAI,CAACvF,MAAM,CAAE,CAAC,EAAE0F,QAAS;QAAE,CAAC;QAEpGJ,IAAI,GAAG,CAAE,UAAU,EAAE5J,KAAK,CAAE,CAACkG,MAAM,CAAE+D,QAAS,CAAC;;QAE/C;QACA;QACA;QACA,OAAO,CAAED,QAAQ,EAAEJ,IAAI,CAAE;MAC3B;;MAEA;MACA;MACA,IAAKK,QAAQ,CAAC5I,MAAM,IAAI,CAAC,IAAI,OAAO4I,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAG;QAE5DjK,KAAK,GAAG;UAAEsI,GAAG,EAAE2B,QAAQ,CAAC,CAAC,CAAC,CAAC1B,WAAW,CAAC,CAAC;UAAGoB,QAAQ,EAAEE,IAAI,CAACvF,MAAM,CAAE,CAAC,EAAE0F,QAAS;QAAE,CAAC;QACjFJ,IAAI,GAAG,CAAE,UAAU,EAAE5J,KAAK,EAAEiK,QAAQ,CAAC,CAAC,CAAC,CAAE;QACzC,OAAO,CAAED,QAAQ,EAAEJ,IAAI,CAAE;MAC3B;;MAEA;MACA,OAAO,CAAE,CAAC,EAAE,GAAG,CAAE;IACnB,CAAC;IAGD,GAAG,EAAE,SAASS,QAAQA,CAAExB,IAAI,EAAG;MAC7B,IAAIxG,CAAC;MAEL,IAAK,CAAEA,CAAC,GAAGwG,IAAI,CAACrE,KAAK,CAAE,yDAA0D,CAAC,KAAM,IAAI,EAAG;QAC7F,IAAKnC,CAAC,CAAC,CAAC,CAAC,EAAG;UACV,OAAO,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAE,CAAE,MAAM,EAAE;YAAEmH,IAAI,EAAE,SAAS,GAAGnG,CAAC,CAAC,CAAC;UAAE,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAE,CAAE;QAEtE,CAAC,MACI,IAAKA,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAG;UAC3B,OAAO,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAE,CAAE,MAAM,EAAE;YAAEmH,IAAI,EAAEnG,CAAC,CAAC,CAAC;UAAE,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAACiC,MAAM,CAAC,SAAS,CAACjD,MAAO,CAAC,CAAE,CAAE;QACpF,CAAC,MAEC,OAAO,CAAEgB,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAE,CAAE,MAAM,EAAE;UAAEmH,IAAI,EAAEnG,CAAC,CAAC,CAAC;QAAE,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAE,CAAE;MAC5D;MAEA,OAAO,CAAE,CAAC,EAAE,GAAG,CAAE;IACnB,CAAC;IAED,GAAG,EAAE,SAASiI,UAAUA,CAAEzB,IAAI,EAAG;MAC/B;MACA;MACA,IAAIxG,CAAC,GAAGwG,IAAI,CAACrE,KAAK,CAAE,oBAAqB,CAAC;MAE1C,IAAKnC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,EACZ,OAAO,CAAEA,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,GAAGgB,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAE,CAAE,YAAY,EAAEgB,CAAC,CAAC,CAAC,CAAC,CAAE,CAAE,CAAC,KAC1D;QACH;QACA,OAAO,CAAE,CAAC,EAAE,GAAG,CAAE;MACnB;IACF,CAAC;IAED,MAAM,EAAE,SAASkI,SAASA,CAAE1B,IAAI,EAAG;MACjC,OAAO,CAAE,CAAC,EAAE,CAAE,WAAW,CAAE,CAAE;IAC/B;EAEJ,CAAC;;EAED;EACA,SAAS2B,SAASA,CAAEC,GAAG,EAAEhL,EAAE,EAAG;IAE5B,IAAIiL,UAAU,GAAGD,GAAG,GAAG,QAAQ;MAC3BE,UAAU,GAAGF,GAAG,IAAI,QAAQ,GAAG,UAAU,GAAG,cAAc;IAE9D,SAASG,QAAQA,CAACR,GAAG,EAAE;MACrB,IAAI,CAACS,SAAS,GAAGT,GAAG;MACpB,IAAI,CAACU,IAAI,GAAG,QAAQ,GAAGrL,EAAE;IAC3B;IAEA,OAAO,UAAWoJ,IAAI,EAAEkC,UAAU,EAAG;MAEnC,IAAK,IAAI,CAACL,UAAU,CAAC,CAAC,CAAC,CAAC,IAAIjL,EAAE,EAAG;QAC/B;QACA;QACA,IAAI,CAACiL,UAAU,CAAC,CAAC/G,KAAK,CAAC,CAAC;;QAExB;QACA,OAAM,CAAEkF,IAAI,CAACxH,MAAM,EAAE,IAAIuJ,QAAQ,CAAC/B,IAAI,CAACxH,MAAM,GAAC5B,EAAE,CAAC4B,MAAM,CAAC,CAAE;MAC5D,CAAC,MACI;QACH;QACA,IAAI2J,KAAK,GAAG,IAAI,CAACL,UAAU,CAAC,CAAC7G,KAAK,CAAC,CAAC;UAChCmH,KAAK,GAAG,IAAI,CAACP,UAAU,CAAC,CAAC5G,KAAK,CAAC,CAAC;QAEpC,IAAI,CAAC4G,UAAU,CAAC,CAAC3G,OAAO,CAACtE,EAAE,CAAC;;QAE5B;;QAEA;QACA,IAAIwD,GAAG,GAAG,IAAI,CAACG,aAAa,CAAEyF,IAAI,CAACvE,MAAM,CAAE7E,EAAE,CAAC4B,MAAO,CAAE,CAAC;QACxD;;QAEA,IAAI6J,IAAI,GAAGjI,GAAG,CAACA,GAAG,CAAC5B,MAAM,GAAG,CAAC,CAAC;;QAE9B;;QAEA,IAAI8J,KAAK,GAAG,IAAI,CAACT,UAAU,CAAC,CAAC/G,KAAK,CAAC,CAAC;QACpC,IAAKuH,IAAI,YAAYN,QAAQ,EAAG;UAC9B3H,GAAG,CAAC6D,GAAG,CAAC,CAAC;UACT;UACA,IAAIkD,QAAQ,GAAGnB,IAAI,CAACxH,MAAM,GAAG6J,IAAI,CAACL,SAAS;UAC3C,OAAO,CAAEb,QAAQ,EAAE,CAAES,GAAG,CAAE,CAACvE,MAAM,CAACjD,GAAG,CAAC,CAAE;QAC1C,CAAC,MACI;UACH;UACA,IAAI,CAAC0H,UAAU,CAAC,GAAGK,KAAK;UACxB,IAAI,CAACN,UAAU,CAAC,GAAGO,KAAK;;UAExB;UACA,OAAO,CAAExL,EAAE,CAAC4B,MAAM,EAAE5B,EAAE,CAAE;QAC1B;MACF;IACF,CAAC,CAAC,CAAC;EACL;EAEAX,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACoE,MAAM,CAAC,IAAI,CAAC,GAAGmH,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC;EACjE1L,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACoE,MAAM,CAAC,IAAI,CAAC,GAAGmH,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC;EACjE1L,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACoE,MAAM,CAAC,GAAG,CAAC,GAAImH,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC;EAC5D1L,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACoE,MAAM,CAAC,GAAG,CAAC,GAAImH,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC;;EAG5D;EACA1L,QAAQ,CAACsM,eAAe,GAAG,UAASC,CAAC,EAAE;IACrC,IAAIxI,GAAG,GAAG,EAAE;IACZ,KAAM,IAAIjB,CAAC,IAAIyJ,CAAC,EAAG;MACjB,IAAKzJ,CAAC,IAAI,WAAW,IAAIA,CAAC,IAAI,UAAU,EAAG;MAC3CiB,GAAG,CAACJ,IAAI,CAAEb,CAAE,CAAC;IACf;IACAyJ,CAAC,CAACvI,SAAS,GAAGD,GAAG;EACnB,CAAC;;EAED;EACA/D,QAAQ,CAACwM,mBAAmB,GAAG,UAASD,CAAC,EAAE;IACzC,IAAInC,QAAQ,GAAG,EAAE;IAEjB,KAAM,IAAItH,CAAC,IAAIyJ,CAAC,EAAG;MACjB;MACA,IAAKzJ,CAAC,CAAC4C,KAAK,CAAE,UAAU,CAAC,EAAG;MAC5B,IAAI6C,CAAC,GAAGzF,CAAC,CAACM,OAAO,CAAE,sBAAsB,EAAE,MAAO,CAAC,CACzCA,OAAO,CAAE,IAAI,EAAE,KAAM,CAAC;MAChCgH,QAAQ,CAACzG,IAAI,CAAEb,CAAC,CAACP,MAAM,IAAI,CAAC,GAAGgG,CAAC,GAAG,KAAK,GAAGA,CAAC,GAAG,GAAI,CAAC;IACtD;IAEA6B,QAAQ,GAAGA,QAAQ,CAACjE,IAAI,CAAC,GAAG,CAAC;IAC7BoG,CAAC,CAACrC,YAAY,GAAGE,QAAQ;IACzB;;IAEA,IAAIqC,EAAE,GAAGF,CAAC,CAACtI,QAAQ;IACnBsI,CAAC,CAACtI,QAAQ,GAAG,UAAS8F,IAAI,EAAE2C,OAAO,EAAE;MACnC,IAAKA,OAAO,IAAIhK,SAAS,EAAG;QAC1B,OAAO+J,EAAE,CAACvI,IAAI,CAAC,IAAI,EAAE6F,IAAI,EAAE2C,OAAO,CAAC;MACrC,CAAC,MAED;QACE,OAAOD,EAAE,CAACvI,IAAI,CAAC,IAAI,EAAE6F,IAAI,EAAEK,QAAQ,CAAC;MACtC;IACF,CAAC;EACH,CAAC;EAEDpK,QAAQ,CAACgL,cAAc,GAAG,CAAC,CAAC;EAC5BhL,QAAQ,CAACgL,cAAc,CAACC,iBAAiB,GAAG,UAAUlB,IAAI,EAAE4C,IAAI,EAAG;IACjE,IAAIzB,QAAQ,GAAG,CAAC;MACZ0B,KAAK,GAAG,EAAE;IAEd,OAAQ,IAAI,EAAG;MACb,IAAK7C,IAAI,CAACW,MAAM,CAAEQ,QAAS,CAAC,IAAIyB,IAAI,EAAG;QACrC;QACAzB,QAAQ,EAAE;QACV,OAAO,CAAEA,QAAQ,EAAE0B,KAAK,CAAE;MAC5B;MAEA,IAAK1B,QAAQ,IAAInB,IAAI,CAACxH,MAAM,EAAG;QAC7B;QACA,OAAO,IAAI;MACb;MAEA,IAAI4B,GAAG,GAAG,IAAI,CAAClE,OAAO,CAACsE,MAAM,CAACsF,cAAc,CAAC3F,IAAI,CAAC,IAAI,EAAE6F,IAAI,CAACvE,MAAM,CAAE0F,QAAS,CAAE,CAAC;MACjFA,QAAQ,IAAI/G,GAAG,CAAE,CAAC,CAAE;MACpB;MACAyI,KAAK,CAACjJ,IAAI,CAACmB,KAAK,CAAE8H,KAAK,EAAEzI,GAAG,CAACa,KAAK,CAAE,CAAE,CAAE,CAAC;IAC3C;EACF,CAAC;;EAED;EACAhF,QAAQ,CAAC6M,eAAe,GAAG,UAAUN,CAAC,EAAG;IACvC,SAASO,KAAKA,CAAA,EAAG,CAAC;IAClBA,KAAK,CAAC9J,SAAS,GAAGuJ,CAAC,CAACpK,KAAK;IACzB,SAAS4K,MAAMA,CAAA,EAAG,CAAC;IACnBA,MAAM,CAAC/J,SAAS,GAAGuJ,CAAC,CAAChI,MAAM;IAE3B,OAAO;MAAEpC,KAAK,EAAE,IAAI2K,KAAK,CAAC,CAAC;MAAEvI,MAAM,EAAE,IAAIwI,MAAM,CAAC;IAAE,CAAC;EACrD,CAAC;EAED/M,QAAQ,CAACsM,eAAe,CAAGtM,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACgC,KAAM,CAAC;EAC3DnC,QAAQ,CAACwM,mBAAmB,CAAExM,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAACoE,MAAO,CAAC;EAE/DvE,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,GAAGhN,QAAQ,CAAC6M,eAAe,CAAE7M,QAAQ,CAACE,QAAQ,CAACC,MAAO,CAAC;EAE/EH,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAACC,eAAe,GAAG,SAASA,eAAeA,CAAEC,WAAW,EAAG;IACjF,IAAIC,IAAI,GAAGC,eAAe,CAAEF,WAAY,CAAC;MACrC7D,IAAI,GAAG,CAAC,CAAC;IAEb,KAAM,IAAIvG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqK,IAAI,CAAC5K,MAAM,EAAE,EAAEO,CAAC,EAAG;MACtC;MACA,IAAK,IAAI,CAACuK,IAAI,CAAEF,IAAI,CAAErK,CAAC,CAAG,CAAC,EAAG;QAC5BuG,IAAI,CAACiE,EAAE,GAAGH,IAAI,CAAErK,CAAC,CAAE,CAACoD,SAAS,CAAE,CAAE,CAAC;MACpC;MACA;MAAA,KACK,IAAK,KAAK,CAACmH,IAAI,CAAEF,IAAI,CAAErK,CAAC,CAAG,CAAC,EAAG;QAClC;QACA,IAAKuG,IAAI,CAAC,OAAO,CAAC,EAAG;UACnBA,IAAI,CAAC,OAAO,CAAC,GAAGA,IAAI,CAAC,OAAO,CAAC,GAAG8D,IAAI,CAAErK,CAAC,CAAE,CAACM,OAAO,CAAE,GAAG,EAAE,GAAI,CAAC;QAC/D,CAAC,MACI;UACHiG,IAAI,CAAC,OAAO,CAAC,GAAG8D,IAAI,CAAErK,CAAC,CAAE,CAACoD,SAAS,CAAE,CAAE,CAAC;QAC1C;MACF;MACA;MAAA,KACK,IAAK,IAAI,CAACmH,IAAI,CAAEF,IAAI,CAAErK,CAAC,CAAG,CAAC,EAAG;QACjC,IAAIN,CAAC,GAAG2K,IAAI,CAAErK,CAAC,CAAE,CAACsF,KAAK,CAAE,IAAK,CAAC;QAC/BiB,IAAI,CAAE7G,CAAC,CAAE,CAAC,CAAE,CAAE,GAAGA,CAAC,CAAE,CAAC,CAAE;MACzB;IACF;IAEA,OAAO6G,IAAI;EACb,CAAC;EAED,SAAS+D,eAAeA,CAAEF,WAAW,EAAG;IACtC,IAAIC,IAAI,GAAGD,WAAW,CAAC9E,KAAK,CAAE,EAAG,CAAC;MAC9BmF,KAAK,GAAG,CAAE,EAAE,CAAE;MACdC,SAAS,GAAG,KAAK;IAErB,OAAQL,IAAI,CAAC5K,MAAM,EAAG;MACpB,IAAIkL,MAAM,GAAGN,IAAI,CAACtI,KAAK,CAAC,CAAC;MACzB,QAAS4I,MAAM;QACb,KAAK,GAAG;UACN;UACA,IAAKD,SAAS,EAAG;YACfD,KAAK,CAAEA,KAAK,CAAChL,MAAM,GAAG,CAAC,CAAE,IAAIkL,MAAM;UACrC;UACA;UAAA,KACK;YACHF,KAAK,CAAC5J,IAAI,CAAE,EAAG,CAAC;UAClB;UACA;QACF,KAAK,GAAG;QACR,KAAK,GAAG;UACN;UACA6J,SAAS,GAAG,CAACA,SAAS;UACtB;QACF,KAAK,IAAI;UACP;UACA;UACAC,MAAM,GAAGN,IAAI,CAACtI,KAAK,CAAC,CAAC;QACvB;UACE0I,KAAK,CAAEA,KAAK,CAAChL,MAAM,GAAG,CAAC,CAAE,IAAIkL,MAAM;UACnC;MACJ;IACF;IAEA,OAAOF,KAAK;EACd;EAEAvN,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAAC7K,KAAK,CAACuL,aAAa,GAAG,SAASA,aAAaA,CAAEvL,KAAK,EAAE0B,IAAI,EAAG;IACnF;IACA,IAAK1B,KAAK,CAACN,UAAU,GAAG,CAAC,EAAG,OAAOa,SAAS;;IAE5C;IACA,IAAK,CAAEP,KAAK,CAACuD,KAAK,CAAE,uBAAwB,CAAC,EAAG,OAAOhD,SAAS;;IAEhE;IACA,IAAK,CAACvB,YAAY,CAAE,IAAI,CAACwD,IAAK,CAAC,EAAG;MAChC,IAAI,CAACA,IAAI,CAACmD,MAAM,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;IAC9B;IAEA,IAAI6F,KAAK,GAAGxL,KAAK,CAACiG,KAAK,CAAE,IAAK,CAAC;IAC/B,KAAMwF,CAAC,IAAID,KAAK,EAAG;MACjB,IAAIpK,CAAC,GAAGoK,KAAK,CAAEC,CAAC,CAAE,CAAClI,KAAK,CAAE,gBAAiB,CAAC;QACxCmI,GAAG,GAAGtK,CAAC,CAAE,CAAC,CAAE,CAACkG,WAAW,CAAC,CAAC;QAC1BqE,KAAK,GAAGvK,CAAC,CAAE,CAAC,CAAE;MAElB,IAAI,CAACoB,IAAI,CAAE,CAAC,CAAE,CAAEkJ,GAAG,CAAE,GAAGC,KAAK;IAC/B;;IAEA;IACA,OAAO,EAAE;EACX,CAAC;EAED9N,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAAC7K,KAAK,CAAC4L,UAAU,GAAG,SAASA,UAAUA,CAAE5L,KAAK,EAAE0B,IAAI,EAAG;IAC7E;IACA,IAAIN,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAAE,2CAA4C,CAAC;IAClE,IAAK,CAACnC,CAAC,EAAG,OAAOb,SAAS;;IAE1B;IACA,IAAI2G,IAAI,GAAG,IAAI,CAACpJ,OAAO,CAACgN,eAAe,CAAE1J,CAAC,CAAE,CAAC,CAAG,CAAC;IAEjD,IAAIyK,IAAI;;IAER;IACA,IAAKzK,CAAC,CAAE,CAAC,CAAE,KAAK,EAAE,EAAG;MACnB,IAAI0K,IAAI,GAAG,IAAI,CAACtJ,IAAI,CAAE,IAAI,CAACA,IAAI,CAACpC,MAAM,GAAG,CAAC,CAAE;MAC5CyL,IAAI,GAAG7M,YAAY,CAAE8M,IAAK,CAAC;;MAE3B;MACA,IAAK,OAAOA,IAAI,KAAK,QAAQ,EAAG,OAAOvL,SAAS;;MAEhD;MACA,IAAK,CAACsL,IAAI,EAAG;QACXA,IAAI,GAAG,CAAC,CAAC;QACTC,IAAI,CAACnG,MAAM,CAAE,CAAC,EAAE,CAAC,EAAEkG,IAAK,CAAC;MAC3B;;MAEA;MACA,KAAME,CAAC,IAAI7E,IAAI,EAAG;QAChB2E,IAAI,CAAEE,CAAC,CAAE,GAAG7E,IAAI,CAAE6E,CAAC,CAAE;MACvB;;MAEA;MACA,OAAO,EAAE;IACX;;IAEA;IACA,IAAItJ,CAAC,GAAGzC,KAAK,CAACiB,OAAO,CAAE,OAAO,EAAE,EAAG,CAAC;MAChC+K,MAAM,GAAG,IAAI,CAACvK,YAAY,CAAEgB,CAAC,EAAE,EAAG,CAAC;;IAEvC;IACAoJ,IAAI,GAAG7M,YAAY,CAAEgN,MAAM,CAAE,CAAC,CAAG,CAAC;IAClC,IAAK,CAACH,IAAI,EAAG;MACXA,IAAI,GAAG,CAAC,CAAC;MACTG,MAAM,CAAE,CAAC,CAAE,CAACrG,MAAM,CAAE,CAAC,EAAE,CAAC,EAAEkG,IAAK,CAAC;IAClC;;IAEA;IACA,KAAME,CAAC,IAAI7E,IAAI,EAAG;MAChB2E,IAAI,CAAEE,CAAC,CAAE,GAAG7E,IAAI,CAAE6E,CAAC,CAAE;IACvB;IAEA,OAAOC,MAAM;EACf,CAAC;EAEDnO,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAAC7K,KAAK,CAACiM,eAAe,GAAG,SAASA,eAAeA,CAAEjM,KAAK,EAAE0B,IAAI,EAAG;IACvF;IACA,IAAIwK,KAAK,GAAG,kCAAkC;MAC1CzG,IAAI,GAAG,CAAE,IAAI,CAAE;MACf9E,CAAC;MAAES,CAAC;;IAER;IACA,IAAOA,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAAE2I,KAAM,CAAC,EAAK;MAClC;MACA,IAAI/K,MAAM,GAAG,CAAEnB,KAAK,CAAE;MACtB,OAAQ0B,IAAI,CAACtB,MAAM,IAAI8L,KAAK,CAAC5K,IAAI,CAAEI,IAAI,CAAE,CAAC,CAAG,CAAC,EAAG;QAC/CP,MAAM,CAACK,IAAI,CAAEE,IAAI,CAACgB,KAAK,CAAC,CAAE,CAAC;MAC7B;MAEA,KAAM,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,MAAM,CAACf,MAAM,EAAE,EAAEqC,CAAC,EAAG;QACxC,IAAIrB,CAAC,GAAGD,MAAM,CAAEsB,CAAC,CAAE,CAACc,KAAK,CAAE2I,KAAM,CAAC;UAC9BC,KAAK,GAAG/K,CAAC,CAAE,CAAC,CAAE,CAACH,OAAO,CAAE,KAAK,EAAE,EAAG,CAAC,CAACgF,KAAK,CAAE,IAAK,CAAC;UACjDmG,KAAK,GAAGhL,CAAC,CAAE,CAAC,CAAE,CAAC6E,KAAK,CAAE,QAAS,CAAC;;QAEpC;;QAEA,KAAMtF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwL,KAAK,CAAC/L,MAAM,EAAE,EAAEO,CAAC,EAAG;UACnC8E,IAAI,CAACjE,IAAI,CAAE,CAAE,IAAI,EAAE2K,KAAK,CAAExL,CAAC,CAAE,CAAG,CAAC;QACnC;QAEA,KAAMA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyL,KAAK,CAAChM,MAAM,EAAE,EAAEO,CAAC,EAAG;UACnC;UACA8E,IAAI,CAACjE,IAAI,CAAE,CAAE,IAAI,CAAE,CAACyD,MAAM,CAAE,IAAI,CAAC9C,aAAa,CAAEiK,KAAK,CAAEzL,CAAC,CAAE,CAACM,OAAO,CAAE,SAAS,EAAE,IAAK,CAAE,CAAE,CAAE,CAAC;QAC7F;MACF;IACF,CAAC,MACI;MACH,OAAOV,SAAS;IAClB;IAEA,OAAO,CAAEkF,IAAI,CAAE;EACjB,CAAC;;EAED;EACA;;EAEA5H,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAAC7K,KAAK,CAACqM,KAAK,GAAG,SAASA,KAAKA,CAAErM,KAAK,EAAE0B,IAAI,EAAE;IAEhE,IAAI4K,mBAAmB,GAAG,SAAAA,CAASjM,CAAC,EAAEkM,EAAE,EAAE;MACtCA,EAAE,GAAGA,EAAE,IAAI,KAAK;MAChB,IAAIA,EAAE,CAAChJ,KAAK,CAAC,qBAAqB,CAAC,EAAE;QAAEgJ,EAAE,GAAG,IAAI,GAAGA,EAAE;MAAE;MACvD,IAAIvK,GAAG,GAAG,EAAG;QACTwK,CAAC,GAAG,IAAIhI,MAAM,CAAC,mBAAmB,GAAG+H,EAAE,GAAG,MAAM,GAAGA,EAAE,GAAG,MAAM,CAAC;QAC/DnL,CAAC;MACL,OAAMA,CAAC,GAAGf,CAAC,CAACkD,KAAK,CAACiJ,CAAC,CAAC,EAAE;QAClBxK,GAAG,CAACR,IAAI,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC;QACdf,CAAC,GAAGe,CAAC,CAAC,CAAC,CAAC;MACZ;MACAY,GAAG,CAACR,IAAI,CAACnB,CAAC,CAAC;MACX,OAAO2B,GAAG;IACd,CAAC;IAED,IAAIyK,YAAY,GAAG,4EAA4E;MAC3F;MACAC,eAAe,GAAG,yGAAyG;MAC3H/L,CAAC;MAAES,CAAC;IACR,IAAIA,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAACkJ,YAAY,CAAC,EAAE;MAC/B;MACA;MACArL,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IACvC,CAAC,MAAM,IAAI,EAAIG,CAAC,GAAGpB,KAAK,CAACuD,KAAK,CAACmJ,eAAe,CAAC,CAAC,EAAE;MAC9C,OAAOnM,SAAS;IACpB;IAEA,IAAI8L,KAAK,GAAG,CAAE,OAAO,EAAE,CAAE,OAAO,EAAE,CAAE,IAAI,CAAE,CAAE,EAAE,CAAE,OAAO,CAAE,CAAE;;IAE3D;IACA;IACAjL,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACgF,KAAK,CAAC,GAAG,CAAC;;IAE5C;IACA,IAAI0G,UAAU,GAAG,EAAG;IACpBhG,OAAO,CAAEvF,CAAC,CAAC,CAAC,CAAC,EAAE,UAAUf,CAAC,EAAE;MACxB,IAAIA,CAAC,CAACkD,KAAK,CAAC,aAAa,CAAC,EAAQoJ,UAAU,CAACnL,IAAI,CAAC;QAACoL,KAAK,EAAE;MAAO,CAAC,CAAC,CAAC,KAC/D,IAAIvM,CAAC,CAACkD,KAAK,CAAC,aAAa,CAAC,EAAGoJ,UAAU,CAACnL,IAAI,CAAC;QAACoL,KAAK,EAAE;MAAM,CAAC,CAAC,CAAC,KAC9D,IAAIvM,CAAC,CAACkD,KAAK,CAAC,cAAc,CAAC,EAAEoJ,UAAU,CAACnL,IAAI,CAAC;QAACoL,KAAK,EAAE;MAAQ,CAAC,CAAC,CAAC,KACnCD,UAAU,CAACnL,IAAI,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC;;IAEF;IACAJ,CAAC,CAAC,CAAC,CAAC,GAAGkL,mBAAmB,CAAClL,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC;IAC3D,KAAKN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,CAAC,CAAC,CAAC,CAAC,CAAChB,MAAM,EAAEO,CAAC,EAAE,EAAE;MAC9B0L,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC7K,IAAI,CAAC,CAAC,IAAI,EAAEmL,UAAU,CAAChM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAACsE,MAAM,CAC/C,IAAI,CAAC9C,aAAa,CAACf,CAAC,CAAC,CAAC,CAAC,CAACT,CAAC,CAAC,CAACkM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C;;IAEA;IACAlG,OAAO,CAAEvF,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAACgF,KAAK,CAAC,IAAI,CAAC,EAAE,UAAU6G,GAAG,EAAE;MAC9D,IAAIC,QAAQ,GAAG,CAAC,IAAI,CAAC;MACrBD,GAAG,GAAGR,mBAAmB,CAACQ,GAAG,EAAE,GAAG,CAAC;MACnC,KAAKnM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmM,GAAG,CAAC1M,MAAM,EAAEO,CAAC,EAAE,EAAE;QAC7BoM,QAAQ,CAACvL,IAAI,CAAC,CAAC,IAAI,EAAEmL,UAAU,CAAChM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAACsE,MAAM,CAAC,IAAI,CAAC9C,aAAa,CAAC2K,GAAG,CAACnM,CAAC,CAAC,CAACkM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MACxF;MACAR,KAAK,CAAC,CAAC,CAAC,CAAC7K,IAAI,CAACuL,QAAQ,CAAC;IAC3B,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,CAACV,KAAK,CAAC;EAClB,CAAC;EAEDxO,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAACzI,MAAM,CAAE,IAAI,CAAE,GAAG,SAAS4K,WAAWA,CAAEpF,IAAI,EAAEqF,OAAO,EAAE/E,GAAG,EAAG;IACnF,IAAK,CAACA,GAAG,CAAC9H,MAAM,EAAG;MACjB,OAAO,CAAE,CAAC,EAAE,IAAI,CAAE;IACpB;;IAEA;IACA,IAAI8M,MAAM,GAAGhF,GAAG,CAAEA,GAAG,CAAC9H,MAAM,GAAG,CAAC,CAAE;IAElC,IAAK,OAAO8M,MAAM,KAAK,QAAQ,EAAG;MAChC,OAAO,CAAE,CAAC,EAAE,IAAI,CAAE;IACpB;;IAEA;IACA,IAAI9L,CAAC,GAAGwG,IAAI,CAACrE,KAAK,CAAE,+BAAgC,CAAC;;IAErD;IACA,IAAK,CAACnC,CAAC,EAAG;MACR,OAAO,CAAE,CAAC,EAAE,IAAI,CAAE;IACpB;;IAEA;IACA,IAAI4J,IAAI,GAAG,IAAI,CAAClN,OAAO,CAACgN,eAAe,CAAE1J,CAAC,CAAE,CAAC,CAAG,CAAC;MAC7C8F,IAAI,GAAGlI,YAAY,CAAEkO,MAAO,CAAC;IAEjC,IAAK,CAAChG,IAAI,EAAG;MACXA,IAAI,GAAG,CAAC,CAAC;MACTgG,MAAM,CAACvH,MAAM,CAAE,CAAC,EAAE,CAAC,EAAEuB,IAAK,CAAC;IAC7B;IAEA,KAAM,IAAIiG,CAAC,IAAInC,IAAI,EAAG;MACpB9D,IAAI,CAAEiG,CAAC,CAAE,GAAGnC,IAAI,CAAEmC,CAAC,CAAE;IACvB;;IAEA;IACA,OAAO,CAAE/L,CAAC,CAAE,CAAC,CAAE,CAAChB,MAAM,EAAE,EAAE,CAAE;EAC9B,CAAC;EAEDvC,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAACzI,MAAM,CAACiG,UAAU,GAAG,8BAA8B;EAE3ExK,QAAQ,CAACsM,eAAe,CAAGtM,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAAC7K,KAAM,CAAC;EAC3DnC,QAAQ,CAACwM,mBAAmB,CAAExM,QAAQ,CAACE,QAAQ,CAAC8M,MAAM,CAACzI,MAAO,CAAC;EAE/D,IAAIH,OAAO,GAAGK,KAAK,CAACL,OAAO,IAAI,UAASmL,GAAG,EAAE;IAC3C,OAAOC,MAAM,CAACxM,SAAS,CAACrB,QAAQ,CAACuC,IAAI,CAACqL,GAAG,CAAC,IAAI,gBAAgB;EAChE,CAAC;EAED,IAAIzG,OAAO;EACX;EACA,IAAKrE,KAAK,CAACzB,SAAS,CAAC8F,OAAO,EAAG;IAC7BA,OAAO,GAAG,SAAAA,CAAU2G,GAAG,EAAEnK,EAAE,EAAEoK,KAAK,EAAG;MACnC,OAAOD,GAAG,CAAC3G,OAAO,CAAExD,EAAE,EAAEoK,KAAM,CAAC;IACjC,CAAC;EACH,CAAC,MACI;IACH5G,OAAO,GAAG,SAAAA,CAAS2G,GAAG,EAAEnK,EAAE,EAAEoK,KAAK,EAAE;MACjC,KAAK,IAAI5M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2M,GAAG,CAAClN,MAAM,EAAEO,CAAC,EAAE,EAAE;QACnCwC,EAAE,CAACpB,IAAI,CAACwL,KAAK,IAAID,GAAG,EAAEA,GAAG,CAAC3M,CAAC,CAAC,EAAEA,CAAC,EAAE2M,GAAG,CAAC;MACvC;IACF,CAAC;EACH;EAEA,IAAInG,OAAO,GAAG,SAAAA,CAAUiG,GAAG,EAAG;IAC5B,KAAM,IAAI1B,GAAG,IAAI0B,GAAG,EAAG;MACrB,IAAKI,cAAc,CAACzL,IAAI,CAAEqL,GAAG,EAAE1B,GAAI,CAAC,EAAG;QACrC,OAAO,KAAK;MACd;IACF;IAEA,OAAO,IAAI;EACb,CAAC;EAED,SAAS1M,YAAYA,CAAEkF,MAAM,EAAG;IAC9B,OAAOjC,OAAO,CAACiC,MAAM,CAAC,IACfA,MAAM,CAAC9D,MAAM,GAAG,CAAC,IACjB,OAAO8D,MAAM,CAAE,CAAC,CAAE,KAAK,QAAQ,IAC/B,CAAGjC,OAAO,CAACiC,MAAM,CAAE,CAAC,CAAE,CAAG,GAC1BA,MAAM,CAAE,CAAC,CAAE,GACX3D,SAAS;EACjB;;EAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA3C,MAAM,CAACkB,YAAY,GAAG,UAAUoF,MAAM,EAAEvF,OAAO,EAAG;IAChDA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB;IACAA,OAAO,CAAC8O,IAAI,GAAG9O,OAAO,CAAC8O,IAAI,IAAI,KAAK;IAEpC,IAAIC,OAAO,GAAG,EAAE;IAEhB,IAAK/O,OAAO,CAAC8O,IAAI,EAAG;MAClBC,OAAO,CAAClM,IAAI,CAAEmM,WAAW,CAAEzJ,MAAO,CAAE,CAAC;IACvC,CAAC,MACI;MACHA,MAAM,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC;MAChB,IAAKwB,MAAM,CAAC9D,MAAM,IAAI,OAAO8D,MAAM,CAAE,CAAC,CAAE,KAAK,QAAQ,IAAI,EAAGA,MAAM,CAAE,CAAC,CAAE,YAAY5B,KAAK,CAAE,EAAG;QAC3F4B,MAAM,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC;MAClB;MAEA,OAAQwB,MAAM,CAAC9D,MAAM,EAAG;QACtBsN,OAAO,CAAClM,IAAI,CAAEmM,WAAW,CAAEzJ,MAAM,CAACxB,KAAK,CAAC,CAAE,CAAE,CAAC;MAC/C;IACF;IAEA,OAAOgL,OAAO,CAAC1J,IAAI,CAAE,MAAO,CAAC;EAC/B,CAAC;EAED,SAAS4J,UAAUA,CAAEhG,IAAI,EAAG;IAC1B,OAAOA,IAAI,CAAC3G,OAAO,CAAE,IAAI,EAAE,OAAQ,CAAC,CACxBA,OAAO,CAAE,IAAI,EAAE,MAAO,CAAC,CACvBA,OAAO,CAAE,IAAI,EAAE,MAAO,CAAC,CACvBA,OAAO,CAAE,IAAI,EAAE,QAAS,CAAC,CACzBA,OAAO,CAAE,IAAI,EAAE,OAAQ,CAAC;EACtC;EAEA,SAAS0M,WAAWA,CAAEzJ,MAAM,EAAG;IAC7B;IACA,IAAK,OAAOA,MAAM,KAAK,QAAQ,EAAG;MAChC,OAAO0J,UAAU,CAAE1J,MAAO,CAAC;IAC7B;IAEA,IAAIsF,GAAG,GAAGtF,MAAM,CAACxB,KAAK,CAAC,CAAC;MACpBmL,UAAU,GAAG,CAAC,CAAC;MACfH,OAAO,GAAG,EAAE;IAEhB,IAAKxJ,MAAM,CAAC9D,MAAM,IAAI,OAAO8D,MAAM,CAAE,CAAC,CAAE,KAAK,QAAQ,IAAI,EAAGA,MAAM,CAAE,CAAC,CAAE,YAAY5B,KAAK,CAAE,EAAG;MAC3FuL,UAAU,GAAG3J,MAAM,CAACxB,KAAK,CAAC,CAAC;IAC7B;IAEA,OAAQwB,MAAM,CAAC9D,MAAM,EAAG;MACtBsN,OAAO,CAAClM,IAAI,CAAEmM,WAAW,CAAEzJ,MAAM,CAACxB,KAAK,CAAC,CAAE,CAAE,CAAC;IAC/C;IAEA,IAAIoL,SAAS,GAAG,EAAE;IAClB,KAAM,IAAI/B,CAAC,IAAI8B,UAAU,EAAG;MAC1BC,SAAS,IAAI,GAAG,GAAG/B,CAAC,GAAG,IAAI,GAAG6B,UAAU,CAAEC,UAAU,CAAE9B,CAAC,CAAG,CAAC,GAAG,GAAG;IACnE;;IAEA;IACA,IAAKvC,GAAG,IAAI,KAAK,IAAIA,GAAG,IAAI,IAAI,IAAIA,GAAG,IAAI,IAAI,EAAG;MAChD,OAAO,GAAG,GAAEA,GAAG,GAAGsE,SAAS,GAAG,IAAI;IACpC,CAAC,MACI;MACH,OAAO,GAAG,GAAEtE,GAAG,GAAGsE,SAAS,GAAG,GAAG,GAAGJ,OAAO,CAAC1J,IAAI,CAAE,EAAG,CAAC,GAAG,IAAI,GAAGwF,GAAG,GAAG,GAAG;IAC3E;EACF;EAEA,SAASpK,oBAAoBA,CAAEoD,IAAI,EAAEtD,UAAU,EAAEP,OAAO,EAAG;IACzD,IAAIgC,CAAC;IACLhC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;IAEvB;IACA,IAAIuF,MAAM,GAAG1B,IAAI,CAACK,KAAK,CAAE,CAAE,CAAC;IAE5B,IAAK,OAAOlE,OAAO,CAACoP,kBAAkB,KAAK,UAAU,EAAG;MACpD7J,MAAM,GAAGvF,OAAO,CAACoP,kBAAkB,CAAC7J,MAAM,EAAEhF,UAAU,CAAC;IAC3D;;IAEA;IACA,IAAIH,KAAK,GAAGC,YAAY,CAAEkF,MAAO,CAAC;IAClC,IAAKnF,KAAK,EAAG;MACXmF,MAAM,CAAE,CAAC,CAAE,GAAG,CAAC,CAAC;MAChB,KAAMvD,CAAC,IAAI5B,KAAK,EAAG;QACjBmF,MAAM,CAAE,CAAC,CAAE,CAAEvD,CAAC,CAAE,GAAG5B,KAAK,CAAE4B,CAAC,CAAE;MAC/B;MACA5B,KAAK,GAAGmF,MAAM,CAAE,CAAC,CAAE;IACrB;;IAEA;IACA,IAAK,OAAOA,MAAM,KAAK,QAAQ,EAAG;MAChC,OAAOA,MAAM;IACf;;IAEA;IACA,QAASA,MAAM,CAAE,CAAC,CAAE;MAClB,KAAK,QAAQ;QACXA,MAAM,CAAE,CAAC,CAAE,GAAG,GAAG,GAAGA,MAAM,CAAE,CAAC,CAAE,CAACT,KAAK;QACrC,OAAOS,MAAM,CAAE,CAAC,CAAE,CAACT,KAAK;QACxB;MACF,KAAK,YAAY;QACfS,MAAM,CAAE,CAAC,CAAE,GAAG,IAAI;QAClB;MACF,KAAK,YAAY;QACfA,MAAM,CAAE,CAAC,CAAE,GAAG,IAAI;QAClB;MACF,KAAK,UAAU;QACbA,MAAM,CAAE,CAAC,CAAE,GAAG,IAAI;QAClB;MACF,KAAK,MAAM;QACTA,MAAM,CAAE,CAAC,CAAE,GAAG,GAAG;QACjB;MACF,KAAK,UAAU;QACbA,MAAM,CAAE,CAAC,CAAE,GAAG,MAAM;QACpB,IAAKnF,KAAK,EAAG,OAAOA,KAAK,CAACG,UAAU;QACpC;MACF,KAAK,YAAY;QACfgF,MAAM,CAAE,CAAC,CAAE,GAAG,KAAK;QACnBvD,CAAC,GAAG5B,KAAK,GAAG,CAAC,GAAG,CAAC;QACjB,IAAI4E,IAAI,GAAG,CAAE,MAAM,CAAE;QACrBA,IAAI,CAACnC,IAAI,CAACmB,KAAK,CAAEgB,IAAI,EAAEO,MAAM,CAACyB,MAAM,CAAEhF,CAAC,EAAEuD,MAAM,CAAC9D,MAAM,GAAGO,CAAE,CAAE,CAAC;QAC9DuD,MAAM,CAAEvD,CAAC,CAAE,GAAGgD,IAAI;QAClB;MACF,KAAK,YAAY;QACfO,MAAM,CAAE,CAAC,CAAE,GAAG,MAAM;QACpB;MACF,KAAK,KAAK;QACRA,MAAM,CAAE,CAAC,CAAE,CAAC8J,GAAG,GAAG9J,MAAM,CAAE,CAAC,CAAE,CAACqD,IAAI;QAClC,OAAOrD,MAAM,CAAE,CAAC,CAAE,CAACqD,IAAI;QACvB;MACF,KAAK,WAAW;QACdrD,MAAM,CAAE,CAAC,CAAE,GAAG,IAAI;QACpB;MACA,KAAK,MAAM;QACTA,MAAM,CAAE,CAAC,CAAE,GAAG,GAAG;QACjB;MACF,KAAK,UAAU;QACbA,MAAM,CAAE,CAAC,CAAE,GAAG,GAAG;;QAEjB;QACA,IAAImD,GAAG,GAAGnI,UAAU,CAAEH,KAAK,CAACsI,GAAG,CAAE;;QAEjC;QACA,IAAKA,GAAG,EAAG;UACT,OAAOtI,KAAK,CAACsI,GAAG;;UAEhB;UACAtI,KAAK,CAACwI,IAAI,GAAGF,GAAG,CAACE,IAAI;UACrB,IAAKF,GAAG,CAACG,KAAK,EAAG;YACfzI,KAAK,CAACyI,KAAK,GAAGH,GAAG,CAACG,KAAK;UACzB;;UAEA;UACA,OAAOzI,KAAK,CAAC2J,QAAQ;QACvB;QACA;QAAA,KACK;UACH,OAAO3J,KAAK,CAAC2J,QAAQ;QACvB;QACA;MACF,KAAK,SAAS;QACZxE,MAAM,CAAE,CAAC,CAAE,GAAG,KAAK;;QAEnB;QACA,IAAImD,GAAG,GAAGnI,UAAU,CAAEH,KAAK,CAACsI,GAAG,CAAE;;QAEjC;QACA,IAAKA,GAAG,EAAG;UACT,OAAOtI,KAAK,CAACsI,GAAG;;UAEhB;UACAtI,KAAK,CAACiP,GAAG,GAAG3G,GAAG,CAACE,IAAI;UACpB,IAAKF,GAAG,CAACG,KAAK,EAAG;YACfzI,KAAK,CAACyI,KAAK,GAAGH,GAAG,CAACG,KAAK;UACzB;;UAEA;UACA,OAAOzI,KAAK,CAAC2J,QAAQ;QACvB;QACA;QAAA,KACK;UACH,OAAO3J,KAAK,CAAC2J,QAAQ;QACvB;QACA;IACJ;;IAEA;IACA/H,CAAC,GAAG,CAAC;;IAEL;IACA,IAAK5B,KAAK,EAAG;MACX;MACA,KAAM,IAAI2M,GAAG,IAAIxH,MAAM,CAAE,CAAC,CAAE,EAAG;QAC3BvD,CAAC,GAAG,CAAC;QACL;MACJ;MACA;MACA,IAAKA,CAAC,KAAK,CAAC,EAAG;QACbuD,MAAM,CAACyB,MAAM,CAAEhF,CAAC,EAAE,CAAE,CAAC;MACvB;IACF;IAEA,OAAQA,CAAC,GAAGuD,MAAM,CAAC9D,MAAM,EAAE,EAAEO,CAAC,EAAG;MAC/BuD,MAAM,CAAEvD,CAAC,CAAE,GAAGvB,oBAAoB,CAAE8E,MAAM,CAAEvD,CAAC,CAAE,EAAEzB,UAAU,EAAEP,OAAQ,CAAC;IACxE;IAEA,OAAOuF,MAAM;EACf;;EAGA;EACA,SAAS7E,gBAAgBA,CAAE6E,MAAM,EAAG;IAClC;IACA,IAAIvD,CAAC,GAAG3B,YAAY,CAAEkF,MAAO,CAAC,GAAG,CAAC,GAAG,CAAC;IAEtC,OAAQvD,CAAC,GAAGuD,MAAM,CAAC9D,MAAM,EAAG;MAC1B;MACA,IAAK,OAAO8D,MAAM,CAAEvD,CAAC,CAAE,KAAK,QAAQ,EAAG;QACrC,IAAKA,CAAC,GAAG,CAAC,GAAGuD,MAAM,CAAC9D,MAAM,IAAI,OAAO8D,MAAM,CAAEvD,CAAC,GAAG,CAAC,CAAE,KAAK,QAAQ,EAAG;UAClE;UACAuD,MAAM,CAAEvD,CAAC,CAAE,IAAIuD,MAAM,CAACyB,MAAM,CAAEhF,CAAC,GAAG,CAAC,EAAE,CAAE,CAAC,CAAE,CAAC,CAAE;QAC/C,CAAC,MACI;UACH,EAAEA,CAAC;QACL;MACF;MACA;MAAA,KACK;QACHtB,gBAAgB,CAAE6E,MAAM,CAAEvD,CAAC,CAAG,CAAC;QAC/B,EAAEA,CAAC;MACL;IACF;EACF;AAEA,CAAC,EAAK,YAAW;EACf,IAAK,OAAOsN,OAAO,KAAK,WAAW,EAAG;IACpCC,MAAM,CAACC,QAAQ,GAAG,CAAC,CAAC;IACpB,OAAOD,MAAM,CAACC,QAAQ;EACxB,CAAC,MACI;IACH,OAAOF,OAAO;EAChB;AACF,CAAC,CAAG,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}